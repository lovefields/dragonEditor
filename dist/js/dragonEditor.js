(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dragonEditor"] = factory();
	else
		root["dragonEditor"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./common/js/index.js":
/*!****************************!*\
  !*** ./common/js/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {const { typeCheckThrow } = __webpack_require__(/*! ./module/default */ \"./common/js/module/default.js\");\nconst { storage } = __webpack_require__(/*! ./module/condition */ \"./common/js/module/condition.js\");\nconst { makeView, setEmoticonList, setMediaList, getContentData, addBlockToContent } = __webpack_require__(/*! ./module/layout */ \"./common/js/module/layout.js\");\nconst { refreshScroll } = __webpack_require__(/*! ./module/scroll */ \"./common/js/module/scroll.js\");\nconst { setEvent, setEmoticonBtnEvent } = __webpack_require__(/*! ./module/event */ \"./common/js/module/event.js\");\nconst { jsonToHtml } = __webpack_require__(/*! ./module/convertor */ \"./common/js/module/convertor.js\");\n\nmodule.exports = class {\n    constructor(options = {}, _0 = typeCheckThrow(options, \"object\")) {\n        global.condition = new storage(options);\n        condition.wrap.dataset[\"layout\"] = condition.layout;\n\n        makeView();\n        condition.setElement(options);\n        setEvent();\n\n        return this;\n    }\n\n    setEmoticon(data, _0 = typeCheckThrow(data, \"array\")) {\n        setEmoticonList(data);\n        refreshScroll();\n        setEmoticonBtnEvent();\n    }\n\n    setMedia(data, _0 = typeCheckThrow(data, \"array\")) {\n        setMediaList(data);\n        refreshScroll();\n    }\n\n    setContentData(data, _0 = typeCheckThrow(data, \"object\")) {\n        let object = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            if (condition.langCategory.indexOf(key) > -1) {\n                object[key] = value;\n            }\n        }\n\n        condition.contentData = object;\n        condition.areaContent.innerHTML = jsonToHtml(object[condition.lang]);\n    }\n\n    getContentData() {\n        condition.contentData[condition.lang] = getContentData();\n        return condition.contentData;\n    }\n\n    addItem(html, _0 = typeCheckThrow(html, \"string\")) {\n        addBlockToContent(`<div class=\"editor-item djs-item\" data-type=\"other\">${html}</div>`);\n    }\n\n    getStatus() {\n        return condition;\n    }\n};\n\n// export function getOptionValue(name) {\n//     if (storage[name] === undefined) {\n//         console.error(`Optins name \"${name}\" is didn't have.`);\n//         return false;\n//     } else {\n//         return storage[name];\n//     }\n// }\n\n// export function setOptionValue(name, value) {\n//     if (storage[name] === undefined) {\n//         console.error(\"Can not set other option name.\");\n//         return false;\n//     } else {\n//         storage[name] = value;\n//         return storage[name];\n//     }\n// }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://dragonEditor/./common/js/index.js?");

/***/ }),

/***/ "./common/js/module/clipboard.js":
/*!***************************************!*\
  !*** ./common/js/module/clipboard.js ***!
  \***************************************/
/*! exports provided: contentPasteEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentPasteEvent\", function() { return contentPasteEvent; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { findParentByClass } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { setCursor } = __webpack_require__(/*! ./cursor */ \"./common/js/module/cursor.js\");\nconst { setSelection } = __webpack_require__(/*! ./selection */ \"./common/js/module/selection.js\");\n\nfunction contentPasteEvent(e, _0 = typeCheckThrow(e, \"event\")) {\n    e.preventDefault();\n\n    let selection = window.getSelection();\n    let $item = findParentByClass(e.target, \"djs-item\");\n    let type = $item.dataset[\"type\"];\n    let data = getDataAndKind(e.clipboardData || window.clipboardData);\n\n    if (data.type == \"text\") {\n        let textNode;\n\n        if (type != \"codeblock\") {\n            data = data.value.replaceAll(\"\\n\", \"\").replaceAll(/  +/g, \" \");\n        } else {\n            data = data.value;\n        }\n\n        textNode = document.createTextNode(data);\n        selection.deleteFromDocument();\n        selection.getRangeAt(0).insertNode(textNode);\n        setCursor(textNode, textNode.length);\n    } else {\n        if (condition.uploadURL !== \"\") {\n            // to-do : paste image\n            // console.log(data);\n        }\n    }\n}\n\nfunction getDataAndKind(data, _0 = typeCheckThrow(data, \"datatransfer\")) {\n    if (data === false) {\n        return undefined;\n    }\n\n    let items = data.items;\n\n    if (items === undefined) {\n        return undefined;\n    }\n\n    let count = items.length;\n    let type, clipboardData;\n    for (let i = 0; i < count; i += 1) {\n        if (items[i].type.indexOf(\"image\") === 0) {\n            type = \"image\";\n            clipboardData = items[i].getAsFile();\n            break;\n        }\n\n        type = \"text\";\n    }\n\n    if (type === \"text\") {\n        clipboardData = data.getData(\"text\");\n    }\n\n    return {\n        type: type,\n        value: clipboardData,\n    };\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/clipboard.js?");

/***/ }),

/***/ "./common/js/module/condition.js":
/*!***************************************!*\
  !*** ./common/js/module/condition.js ***!
  \***************************************/
/*! exports provided: storage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"storage\", function() { return storage; });\nconst { typeCheckThrow, typeCheckBoolean } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getElement, checkElement } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { message } = __webpack_require__(/*! ./message */ \"./common/js/module/message.js\");\n\nclass storage {\n    constructor(options) {\n        this.wrap = getElement(\".editor-dragon\", false);\n\n        if(this.wrap == null){\n            throw `DRAGON EDITOR - You must be set element has \"editor-dragon\" class.`;\n        }\n\n        this.setMessage(options.message);\n        this.setStatus(options);\n    }\n\n    setMessage(data = {}, _0 = typeCheckThrow(data, \"object\")) {\n        let check = [\"apiNotWorking\", \"wrongItemStructure\", \"missingSelect\", \"noContentData\"];\n\n        for (const [key, value] of Object.entries(data)) {\n            if (check.indexOf(key) > -1) {\n                message[key] = value;\n            } else {\n                console.warn(message.wrongKey(\"message\", key));\n            }\n        }\n    }\n\n    setStatus(options) {\n        this.defaultContentData = [{ option: { align: \"\", bold: \"\", color: \"\", fontSize: \"\", italic: \"\", strikethrough: \"\", underline: \"\", wordblock: \"\" }, textContent: \"\", type: \"text\" }];\n        this.popOptionToClose = true;\n        this.log = [];\n        this.linkBoxData = {};\n        this.langCategory = [\"en\", \"ko\"];\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n        this.enterCount = 0;\n        this.activeItem = this.wrap;\n        this.activeElement = this.wrap;\n        this.focusNode;\n        this.baseNode;\n        this.focusOffset;\n        this.baseOffset;\n        this.regList = {\n            srcURL: new RegExp(\"(.*)\\\\.(jpg|png|gif|webp|bmp|jpeg)\", \"i\"),\n            defaultURL: new RegExp(\"https?:\\\\/\\\\/(\\\\w*:\\\\w*@)?[-\\\\w.]+(:\\\\d+)?(\\\\/([\\\\w\\\\/_.]*(\\\\?\\\\S+)?)?)?\", \"i\"),\n            youtubeURL: new RegExp(\"(https:\\\\/\\\\/)?(www\\\\.)?youtu(be)?\\\\.(be|com)?\", \"i\"),\n            youtubeCode: new RegExp(\"((https:\\\\/\\\\/)?(www\\\\.)?youtu(be)?\\\\.(be|com)\\\\/(embed\\\\/|watch\\\\?v=)?)([^=\\\\/& :]*)(.*)\", \"i\"),\n            codepenURL: new RegExp(\"codepen.io\", \"g\"),\n            codepenCode: new RegExp(\"(https:\\\\/\\\\/codepen\\\\.io\\\\/)(\\\\w*)\\\\/(pen|embed)\\\\/([A-Za-z]*)(.*)\", \"i\"),\n        };\n        this.articleIdx = typeCheckBoolean(options.articleIdx, \"number\") ? options.articleIdx : 0;\n        this.articleTempIdx = typeCheckBoolean(options.articleTempIdx, \"number\") ? options.articleTempIdx : 0;\n        this.csrfData = typeCheckBoolean(options.csrfData, \"object\") ? options.csrfData : { name: \"\", value: \"\" };\n        this.csrfHeader = typeCheckBoolean(options.csrfHeader, \"object\") ? options.csrfHeader : {};\n        this.mode = typeCheckBoolean(options.mode, \"string\") ? options.mode : \"editor\";\n        this.layout = typeCheckBoolean(options.layout, \"string\") ? options.layout : \"full\";\n        this.multiLang = typeCheckBoolean(options.multiLang, \"boolean\") ? options.multiLang : true;\n        this.defaultColor = typeCheckBoolean(options.defaultColor, \"string\") ? options.defaultColor : \"#333\";\n        this.defaultFontSize = typeCheckBoolean(options.defaultFontSize, \"number\") ? options.defaultFontSize : 16;\n        this.changePoint = typeCheckBoolean(options.changePoint, \"number\") ? options.changePoint : 800;\n        this.maxImageWidth = typeCheckBoolean(options.maxImageWidth, \"number\") ? options.maxImageWidth : 700;\n        this.maxCodepenHeight = typeCheckBoolean(options.maxCodepenHeight, \"number\") ? options.maxCodepenHeight : 1000;\n        this.useWebp = typeCheckBoolean(options.useWebp, \"boolean\") ? options.useWebp : true;\n        this.codepenTheme = typeCheckBoolean(options.codepenTheme, \"string\") ? options.codepenTheme : \"dark\";\n        this.blockName = typeCheckBoolean(options.blockName, \"object\") ? options.blockName : {};\n        this.removeMenu = typeCheckBoolean(options.removeMenu, Array) ? options.removeMenu : [];\n        this.frontSize = typeCheckBoolean(options.frontSize, Array) ? options.frontSize : [0.75, 0.9, 1, 1.15, 1.25, 1.5, 1.75, 1.9, 2, 2.15, 2.25];\n        this.codeTheme = typeCheckBoolean(options.codeTheme, Array) ? options.codeTheme : [\"default\", \"vs2015\", \"androidstudio\", \"monokai\"];\n        this.codeLang = typeCheckBoolean(options.codeLang, Array) ? options.codeLang : [\"text\", \"css\", \"html\", \"xml\", \"json\", \"java\", \"javascript\", \"markdown\", \"objective-c\", \"php\", \"python\", \"sql\", \"shell\", \"kotlin\", \"swift\"];\n        this.colorList = typeCheckBoolean(options.colorList, Array)\n            ? options.colorList\n            : [\n                  \"#fff\",\n                  \"#efefef\",\n                  \"#ccc\",\n                  \"#999\",\n                  \"#777\",\n                  \"#555\",\n                  \"#333\",\n                  \"#e6b8af\",\n                  \"#dd7e6b\",\n                  \"#cc4125\",\n                  \"#980000\",\n                  \"#a61c00\",\n                  \"#85200c\",\n                  \"#5b0f00\",\n                  \"#f4cccc\",\n                  \"#ea9999\",\n                  \"#e06666\",\n                  \"#ff0000\",\n                  \"#cc0000\",\n                  \"#990000\",\n                  \"#660000\",\n                  \"#fce5cd\",\n                  \"#f9cb9c\",\n                  \"#f6b36b\",\n                  \"#ff9900\",\n                  \"#e69138\",\n                  \"#b45f06\",\n                  \"#783f04\",\n                  \"#fff2cc\",\n                  \"#ffe599\",\n                  \"#ffd966\",\n                  \"#ffff00\",\n                  \"#f1c232\",\n                  \"#bf9000\",\n                  \"#7f6000\",\n                  \"#d9ead3\",\n                  \"#b6d7a8\",\n                  \"#93c47d\",\n                  \"#00ff00\",\n                  \"#6aa84f\",\n                  \"#38761d\",\n                  \"#274e13\",\n                  \"#d0e0e3\",\n                  \"#a2c4c9\",\n                  \"#76a5af\",\n                  \"#00ffff\",\n                  \"#45818e\",\n                  \"#134f5c\",\n                  \"#0c343d\",\n                  \"#c9daf8\",\n                  \"#a4c2f4\",\n                  \"#6d9eeb\",\n                  \"#4a87e8\",\n                  \"#3c78d8\",\n                  \"#1156cc\",\n                  \"#1c4587\",\n                  \"#cfe2f3\",\n                  \"#9fc5e8\",\n                  \"#6fa8dc\",\n                  \"#0000ff\",\n                  \"#3d85c6\",\n                  \"#0b5394\",\n                  \"#073763\",\n                  \"#d9d2e9\",\n                  \"#b4a7d6\",\n                  \"#8e7cc3\",\n                  \"#9900ff\",\n                  \"#674ea7\",\n                  \"#351c75\",\n                  \"#20124d\",\n                  \"#ead1dc\",\n                  \"#d5a6bd\",\n                  \"#c27ba0\",\n                  \"#ff00ff\",\n                  \"#a64d79\",\n                  \"#741b47\",\n                  \"#4c1130\",\n              ];\n        this.addMenu = typeCheckBoolean(options.addMenu, \"object\") ? options.addMenu : {};\n        this.addLang = typeCheckBoolean(options.addLang, Array) ? options.addLang : [];\n        this.triggerLangChange = typeCheckBoolean(options.triggerLangChange, \"function\") ? options.triggerLangChange : () => {};\n        this.multiUpload = typeCheckBoolean(options.multiUpload, \"boolean\") ? options.multiUpload : false;\n        this.defaultLinkBoxImage = typeCheckBoolean(options.defaultLinkBoxImage, \"string\") ? options.defaultLinkBoxImage : \"https://via.placeholder.com/600x300.png\";\n        this.linkBoxApi = typeCheckBoolean(options.linkBoxApi, \"string\") ? options.linkBoxApi : \"\";\n\n        this.setUploadURL(options.uploadURL);\n        this.setLang(options.lang);\n        this.setContentData();\n        this.setBlockMenu();\n        this.addLanguage();\n    }\n\n    setUploadURL(url = \"\") {\n        if (url == \"\") {\n            this.uploadURL = \"\";\n            return;\n        }\n\n        if (typeCheckBoolean(url, \"string\") == true) {\n            if (this.regList[\"defaultURL\"].test(url) == true || url.substr(0, 1) == \"/\") {\n                this.uploadURL = url;\n            } else {\n                console.warn(message.wrongURL(\"uploadURL\", url));\n                this.uploadURL = \"\";\n            }\n        } else {\n            console.warn(message.wrongURL(\"uploadURL\", url));\n            this.uploadURL = \"\";\n        }\n    }\n\n    setLang(lang) {\n        if (typeCheckBoolean(lang, \"undefined\") == true) {\n            this.lang = this.langCategory[0];\n        } else {\n            if (typeCheckBoolean(lang, \"string\") == true) {\n                let index = this.langCategory.indexOf(lang);\n                if (index > -1) {\n                    this.lang = this.langCategory[index];\n                } else {\n                    this.langCategory.unshift(lang);\n                    this.lang = this.langCategory[0];\n                }\n            } else {\n                console.warn(message.wrongValue(\"lang\"));\n                this.lang = this.langCategory[0];\n            }\n        }\n    }\n\n    setContentData() {\n        let data = {};\n\n        this.langCategory.forEach((lang) => {\n            data[lang] = [];\n        });\n\n        this.contentData = data;\n    }\n\n    setBlockMenu() {\n        let defaultMenu = {\n            textBlock: {\n                text: \"Text\",\n                icon: \"#icon-text-block\",\n                type: \"block\",\n            },\n            imageBlock: {\n                text: \"Image\",\n                icon: \"#icon-image-block\",\n                type: \"file\",\n            },\n            ulBlock: {\n                text: \"Unnumbered list\",\n                icon: \"#icon-ul-block\",\n                type: \"block\",\n            },\n            olBlock: {\n                text: \"Numbered list\",\n                icon: \"#icon-ol-block\",\n                type: \"block\",\n            },\n            quotaionBlock: {\n                text: \"Quotaion\",\n                icon: \"#icon-quotaion-block\",\n                type: \"block\",\n            },\n            tableBlock: {\n                text: \"Table\",\n                icon: \"#icon-table-block\",\n                type: \"block\",\n            },\n            linkboxBlock: {\n                text: \"Link box\",\n                icon: \"#icon-linkbox-block\",\n                type: \"pop\",\n            },\n            emoticonBlock: {\n                text: \"Emoticon\",\n                icon: \"#icon-emoticon-block\",\n                type: \"pop\",\n            },\n            youtubeBlock: {\n                text: \"Youtube\",\n                icon: \"#icon-youtube-block\",\n                type: \"pop\",\n            },\n            codepenBlock: {\n                text: \"Codepen\",\n                icon: \"#icon-codepen-block\",\n                type: \"pop\",\n            },\n            codeBlock: {\n                text: \"Code\",\n                icon: \"#icon-code-block\",\n                type: \"block\",\n            },\n        };\n\n        for (const [key, value] of Object.entries(this.blockName)) {\n            if (typeCheckBoolean(value, \"string\") == true) {\n                defaultMenu[key].text = value;\n            }\n        }\n        delete this.blockName;\n\n        if (this.uploadURL == \"\") {\n            delete defaultMenu.imageBlock;\n        }\n\n        this.removeMenu.forEach((item) => {\n            delete defaultMenu[item];\n        });\n        delete this.removeMenu;\n\n        for (const [key, value] of Object.entries(this.addMenu)) {\n            defaultMenu[key] = {\n                type: \"custom\",\n                text: value.text,\n                icon: value.icon,\n                fn: value.fn,\n            };\n        }\n        delete this.addMenu;\n\n        this.defaultMenu = defaultMenu;\n    }\n\n    addLanguage() {\n        let list = [];\n\n        this.addLang.forEach((lang) => {\n            if (typeCheckBoolean(lang, \"string\")) {\n                if (lang.length == 2) {\n                    list.push(lang);\n                }\n            }\n        });\n\n        this.langCategory = [...new Set(this.langCategory.concat(list))];\n        delete this.addLang;\n    }\n\n    setElement(data) {\n        this.scrollArea = getElement(\".djs-scroll\");\n        this.btnToggleTarget = getElement(\".djs-toggle-target\");\n        this.btnAddBlock = getElement(\".djs-add-block\");\n        this.areaContent = getElement(\".djs-content\", false);\n        this.popEmoticon = getElement(\".djs-emoticon-pop\", false);\n        this.popFolder = getElement(\".djs-folder-pop\", false);\n        this.popLinkbox = getElement(\".djs-linkbox-pop\", false);\n        this.btnLinkbox = getElement(\".djs-linkbox-pop .djs-btn\", false);\n        this.listEmoticon = getElement(\".djs-list-emoticon\", false);\n        this.listMedia = getElement(\".djs-list-media\", false);\n        this.popOption = getElement(\".djs-option-pop\", false);\n        this.btnSwitchDevice = checkElement(data.btnSwitchDevice, \".djs-switch-device\", false);\n        if (condition.multiLang == true) {\n            this.btnChangeLang = checkElement(data.btnChangeLang, \".djs-change-lang\");\n        }\n        this.btnFontSize = getElement(\".djs-change-fontsize\");\n        this.btnColor = getElement(\".djs-change-color\");\n        this.btnAlign = getElement(\".djs-change-align\");\n        this.btnToggleBold = getElement(\".djs-toggle-bold\", false);\n        this.btnToggleItalic = getElement(\".djs-toggle-italic\", false);\n        this.btnToggleUnderline = getElement(\".djs-toggle-underline\", false);\n        this.btnToggleStrikethrough = getElement(\".djs-toggle-strikethrough\", false);\n        this.btnListType = getElement(\".djs-set-list-type\");\n        this.btnTableHeader = getElement(\".djs-table-header\", false);\n        this.btnTableBody = getElement(\".djs-table-body\", false);\n        this.btnThemeSet = getElement(\".djs-set-theme\");\n        this.btnLangSet = getElement(\".djs-set-lang\");\n        this.btnItemMobeUp = getElement(\".djs-move-up\", false);\n        this.btnItemMobeDown = getElement(\".djs-move-down\", false);\n        this.btnWordBlock = getElement(\".djs-word-block\", false);\n        this.btnWordLink = getElement(\".djs-open-linkbox\", false);\n        this.btnItemDelete = getElement(\".djs-delete-block\", false);\n\n        if (condition.uploadURL !== \"\") {\n            this.uploadForm = getElement(\".djs-uploader\", false);\n            this.uploadInput = getElement(\".djs-uploader .djs-file\", false);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/condition.js?");

/***/ }),

/***/ "./common/js/module/convertor.js":
/*!***************************************!*\
  !*** ./common/js/module/convertor.js ***!
  \***************************************/
/*! exports provided: jsonToHtml, htmlToJson */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"jsonToHtml\", function() { return jsonToHtml; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"htmlToJson\", function() { return htmlToJson; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getTextItemOption } = __webpack_require__(/*! ./option */ \"./common/js/module/option.js\");\nconst { getChild } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\n\nfunction jsonToHtml(json) {\n    let html = \"\";\n    let option = \"\";\n\n    json.forEach(function (item) {\n        switch (item.type) {\n            case \"text\":\n                for (const [key, value] of Object.entries(item.option)) {\n                    if (value != \"\") {\n                        option += ` data-${key}=\"${value}\"`;\n                    }\n                }\n\n                html += `<p class=\"editor-item djs-item\" ${option} contenteditable=\"true\" data-type=\"${item.type}\">${item.textContent}</p>`;\n                option = \"\";\n                break;\n            case \"image\":\n                for (const [key, value] of Object.entries(item.option)) {\n                    if (value != \"\") {\n                        option += ` data-${key}=\"${value}\"`;\n                    }\n                }\n\n                html += `<div class=\"editor-item djs-item\" data-type=\"${item.type}\" data-webp=\"${item.hasWebp}\" ${option}>`;\n                html += `<div class=\"editor-size djs-size\" data-width=\"${item.itemWidth}\">`;\n\n                option = \"\";\n\n                if (condition.useWebp == true) {\n                    html += `<picture>`;\n                    if (item.hasWebp == true) {\n                        html += `<source srcset=\"${item.src}.webp\" type=\"image/webp\">`;\n                    }\n                    html += `<img src=\"${item.src}.${item.defaultFormat}\" width=\"${item.width}\" data-height=\"${item.height}\" alt=\"${item.alt}\" class=\"editor-img djs-img\" draggable=\"false\"></picture>`;\n                } else {\n                    html += `<img src=\"${item.src}.${item.defaultFormat}\" width=\"${item.width}\" data-height=\"${item.height}\" alt=\"${item.alt}\" class=\"editor-img djs-img\" draggable=\"false\">`;\n                }\n\n                for (const [key, value] of Object.entries(item.caption.option)) {\n                    if (value != \"\") {\n                        option += ` data-${key}=\"${value}\"`;\n                    }\n                }\n\n                html += `<button class=\"editor-btn-resize --left djs-resize\" data-value=\"width\" data-position=\"left\">resize</button><button class=\"editor-btn-resize --right djs-resize\" data-value=\"width\" data-position=\"right\">resize</button>`;\n                html += `</div>`;\n                html += `<p class=\"editor-caption djs-caption\" contenteditable=\"true\"${option}>${item.caption.textContent}</p>`;\n                html += `</div>`;\n                option = \"\";\n                break;\n            case \"ul\":\n                let $ulChild = \"\";\n\n                item.child.forEach(($child) => {\n                    for (const [key, value] of Object.entries($child.option)) {\n                        if (value != \"\") {\n                            option += ` data-${key}=\"${value}\"`;\n                        }\n                    }\n\n                    $ulChild += `<li contenteditable=\"true\"${option}>${$child.textContent}</li>`;\n                    option = \"\";\n                });\n\n                html += `<ul class=\"editor-item djs-item\" data-type=\"${item.type}\">${$ulChild}</ul>`;\n                break;\n            case \"ol\":\n                let $olChild = \"\";\n\n                item.child.forEach(($child) => {\n                    for (const [key, value] of Object.entries($child.option)) {\n                        if (value != \"\") {\n                            option += ` data-${key}=\"${value}\"`;\n                        }\n                    }\n\n                    $olChild += `<li contenteditable=\"true\"${option}>${$child.textContent}</li>`;\n                    option = \"\";\n                });\n\n                html += `<ol class=\"editor-item djs-item\" data-style=\"${item.style}\" data-type=\"${item.type}\">${$olChild}</ol>`;\n                break;\n            case \"quote\":\n                html += `<blockquote class=\"editor-item djs-item\" data-type=\"${item.type}\" data-style=\"${item.style}\"><p class=\"editor-text djs-text\" contenteditable=\"true\">${item.text}</p><p class=\"editor-author djs-author\" contenteditable=\"true\">${item.author}</p></blockquote>`;\n                break;\n            case \"table\":\n                let rowNum = 0;\n\n                for (const [key, value] of Object.entries(item.caption.option)) {\n                    if (value != \"\") {\n                        option += ` data-${key}=\"${value}\"`;\n                    }\n                }\n\n                html += `\n                    <div class=\"editor-item djs-item\" data-type=\"${item.type}\">\n                        <div class=\"editor-scroll\">\n                            <table class=\"editor-table\">\n                                <caption ${option} class=\"djs-caption\" contenteditable=\"true\">${item.caption.textContent}</caption>\n                                <colgroup>`;\n\n                option = \"\";\n\n                item.colgroup.forEach(function (col) {\n                    html += `<col data-size=\"${col}\">`;\n                });\n\n                html += \"</colgroup><tbody>\";\n\n                item.body.forEach(function (tr) {\n                    let cellNum = 0;\n\n                    html += \"<tr>\";\n\n                    tr.forEach(function (cell) {\n                        for (const [key, value] of Object.entries(cell.option)) {\n                            if (value != \"\") {\n                                option += ` data-${key}=\"${value}\"`;\n                            }\n                        }\n\n                        html += `<${cell.tag} contenteditable=\"true\" data-x=\"${cellNum}\" data-y=\"${rowNum}\"${option}>${cell.textContent}</${cell.tag}>`;\n                        cellNum += 1;\n                        option = \"\";\n                    });\n\n                    html += \"</tr>\";\n                    rowNum += 1;\n                });\n                html += \"</tbody></table></div></div>\";\n                break;\n            case \"linkbox\":\n                html += `\n                    <div class=\"editor-item djs-item\" data-type=\"${item.type}\">\n                        <a href=\"${item.url}\" target=\"_blank\" rel=\"nofollow\" class=\"editor-linkbox editor-clearfix djs-linkbox\" draggable=\"false\">\n                            <div class=\"editor-linkbox-img\">\n                                <img src=\"${item.imgSrc}\" alt=\"preview image\" class=\"editor-img djs-img\" draggable=\"false\">\n                            </div>\n            \n                            <div class=\"editor-linkbox-text\">\n                                <p class=\"editor-title djs-title\">${item.title}</p>\n                                <p class=\"editor-description djs-description\">${item.description}</p>\n                                <p class=\"editor-domain djs-domain\">${item.domain}</p>\n                            </div>\n                        </a>\n                    </div>\n                `;\n                break;\n            case \"emoticon\":\n                html += `<div class=\"editor-item djs-item\" data-type=\"${item.type}\">${item.code}</div>`;\n                break;\n\n            case \"youtube\":\n                html += `\n                    <div class=\"editor-item djs-item\" data-type=\"${item.type}\" data-code=\"${item.code}\">\n                        <iframe src=\"https://www.youtube.com/embed/${item.code}\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen class=\"editor-iframe djs-iframe\"></iframe>\n                        <button class=\"editor-edit\">edit</button>\n                    </div>\n                `;\n                break;\n            case \"codepen\":\n                html += `\n                    <div class=\"editor-item djs-item\" data-type=\"${item.type}\">\n                        <iframe height=\"${item.height}\" title=\"\" src=\"https://codepen.io/${item.nickname}/embed/${item.code}?height=${item.height}&theme-id=${condition.codepenTheme}&default-tab=result\" allowfullscreen class=\"editor-iframe djs-iframe\" data-code=\"${item.code}\" data-nickname=\"${item.nickname}\"></iframe>\n                        <button class=\"editor-btn-resize djs-resize\" data-value=\"height\">Resize height</button>\n                        <button class=\"editor-edit\">edit</button>\n                    </div>\n                `;\n                break;\n            case \"codeblock\":\n                html += `<pre class=\"editor-item djs-item\" data-type=\"${item.type}\" data-theme=\"${item.theme}\" data-lang=\"${item.lang}\"><code class=\"${item.code.class.join(\" \")}\" contenteditable=\"true\">${item.code.textContent}</code></pre>`;\n                break;\n            default:\n                html += `<div class=\"editor-item djs-item\" data-type=\"${item.type}\">${item.other}</div>`;\n        }\n    });\n\n    return html;\n}\n\nfunction htmlToJson($nodeList, _0 = typeCheckThrow($nodeList, \"nodelist\")) {\n    let arr = [];\n\n    $nodeList.forEach(($item) => {\n        let type = $item.dataset[\"type\"];\n\n        switch (type) {\n            case \"text\":\n                arr.push({\n                    type: \"text\",\n                    option: getTextItemOption($item),\n                    textContent: $item.innerHTML,\n                });\n                break;\n            case \"image\":\n                let hasWebp = $item.dataset[\"webp\"] == \"true\" ? true : false;\n                let $img = getChild($item, \".djs-img\", false);\n                let link = $img.getAttribute(\"src\");\n                let $imgCaption = getChild($item, \".djs-caption\", false);\n\n                arr.push({\n                    type: \"image\",\n                    option: getTextItemOption($item),\n                    hasWebp: hasWebp,\n                    itemWidth: getChild($item, \".djs-size\", false).dataset[\"width\"],\n                    width: $img.getAttribute(\"width\"),\n                    height: $img.dataset[\"height\"],\n                    alt: $img.getAttribute(\"alt\"),\n                    src: link.replace(condition.regList.srcURL, \"$1\"),\n                    defaultFormat: link.replace(condition.regList.srcURL, \"$2\"),\n                    caption: {\n                        option: getTextItemOption($imgCaption),\n                        textContent: $imgCaption.textContent,\n                    },\n                });\n                break;\n            case \"ul\":\n                let ulChildList = [];\n                let $ulChilds = getChild($item, `*[contenteditable=\"true\"]`);\n\n                $ulChilds.forEach(($child) => {\n                    ulChildList.push({\n                        option: getTextItemOption($child),\n                        textContent: $child.innerHTML,\n                    });\n                });\n\n                arr.push({\n                    type: \"ul\",\n                    child: ulChildList,\n                });\n                break;\n            case \"ol\":\n                let olChildList = [];\n                let $olChilds = getChild($item, `*[contenteditable=\"true\"]`);\n\n                $olChilds.forEach(($child) => {\n                    olChildList.push({\n                        option: getTextItemOption($child),\n                        textContent: $child.innerHTML,\n                    });\n                });\n\n                arr.push({\n                    type: \"ol\",\n                    style: $item.dataset[\"style\"],\n                    child: olChildList,\n                });\n                break;\n            case \"quote\":\n                arr.push({\n                    type: \"quote\",\n                    style: $item.dataset[\"style\"],\n                    text: getChild($item, \".djs-text\", false).textContent,\n                    author: getChild($item, \".djs-author\", false).textContent,\n                });\n                break;\n            case \"table\":\n                let tableCol = [];\n                let tableBody = [];\n                let $colList = getChild($item, \"col\");\n                let $trList = getChild($item, \"tbody tr\");\n                let $tableCaption = getChild($item, \".djs-caption\", false);\n\n                $colList.forEach(($col) => {\n                    tableCol.push($col.dataset[\"size\"]);\n                });\n\n                $trList.forEach(($tr) => {\n                    let childArr = [];\n                    let $child = getChild($tr, `*[contenteditable=\"true\"]`);\n\n                    $child.forEach(($node) => {\n                        childArr.push({\n                            tag: $node.tagName.toLowerCase(),\n                            option: getTextItemOption($node),\n                            textContent: $node.innerHTML,\n                        });\n                    });\n\n                    tableBody.push(childArr);\n                });\n\n                arr.push({\n                    type: \"table\",\n                    caption: {\n                        option: getTextItemOption($tableCaption),\n                        textContent: $tableCaption.textContent,\n                    },\n                    colgroup: tableCol,\n                    body: tableBody,\n                });\n                break;\n            case \"linkbox\":\n                arr.push({\n                    type: \"linkbox\",\n                    url: getChild($item, \".djs-linkbox\", false).getAttribute(\"href\"),\n                    imgSrc: getChild($item, \".djs-img\", false).getAttribute(\"src\"),\n                    title: getChild($item, \".djs-title\", false).textContent,\n                    description: getChild($item, \".djs-description\", false).textContent,\n                    domain: getChild($item, \".djs-domain\", false).textContent,\n                });\n                break;\n            case \"emoticon\":\n                arr.push({\n                    type: \"emoticon\",\n                    code: $item.innerHTML,\n                });\n                break;\n            case \"youtube\":\n                arr.push({\n                    type: \"youtube\",\n                    code: $item.dataset[\"code\"],\n                });\n                break;\n            case \"codepen\":\n                arr.push({\n                    type: \"codepen\",\n                    nickname: getChild($item, \".djs-iframe\", false).dataset[\"nickname\"],\n                    code: getChild($item, \".djs-iframe\", false).dataset[\"code\"],\n                    height: getChild($item, \".djs-iframe\", false).getAttribute(\"height\"),\n                });\n                break;\n            case \"codeblock\":\n                let $code = getChild($item, \".djs-code\", false);\n\n                arr.push({\n                    type: \"codeblock\",\n                    theme: $item.dataset[\"theme\"],\n                    lang: $item.dataset[\"lang\"],\n                    code: {\n                        class: [...$code.classList],\n                        textContent: $code.innerHTML,\n                    },\n                });\n                break;\n            default:\n                arr.push({\n                    type: type,\n                    other: $item.innerHTML,\n                });\n        }\n    });\n\n    return arr;\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/convertor.js?");

/***/ }),

/***/ "./common/js/module/cursor.js":
/*!************************************!*\
  !*** ./common/js/module/cursor.js ***!
  \************************************/
/*! exports provided: setCursor, isTextSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setCursor\", function() { return setCursor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTextSelect\", function() { return isTextSelect; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { setSelection } = __webpack_require__(/*! ./selection */ \"./common/js/module/selection.js\");\n\nfunction setCursor($node, position, _0 = typeCheckThrow($node, \"node\"), _1 = typeCheckThrow(position, \"number\")) {\n    let select = window.getSelection();\n    let range = document.createRange();\n\n    range.setStart($node, position);\n    range.collapse(true);\n    select.removeAllRanges();\n    select.addRange(range);\n\n    setSelection();\n}\n\nfunction isTextSelect() {\n    if (condition.focusNode == condition.baseNode && condition.focusOffset == condition.baseOffset) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/cursor.js?");

/***/ }),

/***/ "./common/js/module/default.js":
/*!*************************************!*\
  !*** ./common/js/module/default.js ***!
  \*************************************/
/*! exports provided: typeCheckThrow, typeCheckBoolean, eventBinding, removeEvent, classControl, hasClass, fetchURL, upperFirstChar, isMobile, hasValueArrToArr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typeCheckThrow\", function() { return typeCheckThrow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typeCheckBoolean\", function() { return typeCheckBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventBinding\", function() { return eventBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeEvent\", function() { return removeEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"classControl\", function() { return classControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasClass\", function() { return hasClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetchURL\", function() { return fetchURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"upperFirstChar\", function() { return upperFirstChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isMobile\", function() { return isMobile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasValueArrToArr\", function() { return hasValueArrToArr; });\nconst { message } = __webpack_require__(/*! ./message */ \"./common/js/module/message.js\");\n\nfunction typeCheckThrow(target, type) {\n    if (type !== \"*\") {\n        if (typeof type === \"string\") {\n            let typeofValue = typeof target;\n            let typeArr = type.split(\",\");\n            let instanseName;\n\n            if (typeofValue !== \"object\") {\n                instanseName = typeofValue;\n            } else {\n                if (target.addEventListener !== undefined) {\n                    instanseName = \"node\";\n                } else {\n                    if (target instanceof Event) {\n                        instanseName = \"event\";\n                    } else {\n                        instanseName = target.constructor.name.toLowerCase();\n                    }\n                }\n            }\n\n            if (typeArr.indexOf(instanseName) == -1) {\n                throw `DRAGON EDITOR - invalid type ${target} : ${typeArr.join(\",\")}`;\n            }\n        } else {\n            throw `DRAGON EDITOR - type augment is must be String : ${type}`;\n        }\n    }\n\n    return target;\n\n    // if (typeof type == \"string\") {\n    //     let targetType = typeof target;\n    //     let typeArr = type.split(\",\");\n\n    //     if (typeArr.indexOf(targetType) == -1) {\n    //         throw `DRAGON EDITOR - invalid type ${target} : ${typeArr.join(\",\")}`;\n    //     }\n    // } else {\n    //     let typeArr;\n    //     let value = true;\n\n    //     if (type instanceof Function) {\n    //         typeArr = [type];\n    //     } else if (type instanceof Array) {\n    //         typeArr = type;\n    //     } else {\n    //         throw `DRAGON EDITOR - Wrong type check augment ${type}`;\n    //     }\n\n    //     typeArr.forEach((item) => {\n    //         if (!(target instanceof item)) {\n    //             value = false;\n    //         }\n    //     });\n\n    //     if (value == false) {\n    //         throw `DRAGON EDITOR - invalid type ${target} : ${type}`;\n    //     }\n    // }\n\n    // return target;\n}\n\nfunction typeCheckBoolean(target, type) {\n    let status = true;\n\n    if (type !== \"*\") {\n        if (typeof type === \"string\") {\n            let typeofValue = typeof target;\n            let typeArr = type.split(\",\");\n            let instanseName;\n\n            if (typeofValue !== \"object\") {\n                instanseName = typeofValue;\n            } else {\n                if (target.addEventListener !== undefined) {\n                    instanseName = \"node\";\n                } else {\n                    if (target instanceof Event) {\n                        instanseName = \"event\";\n                    } else {\n                        instanseName = target.constructor.name.toLowerCase();\n                    }\n                }\n            }\n\n            if (typeArr.indexOf(instanseName) == -1) {\n                status = false;\n            }\n        } else {\n            status = false;\n        }\n    }\n\n    return status;\n\n    // if (typeof type == \"string\") {\n    //     let targetType = typeof target;\n    //     let typeArr = type.split(\",\");\n\n    //     if (typeArr.indexOf(targetType) == -1) {\n    //         status = false;\n    //     }\n    // } else {\n    //     let typeArr;\n    //     let value = true;\n\n    //     if (type instanceof Function) {\n    //         typeArr = [type];\n    //     } else if (type instanceof Array) {\n    //         typeArr = type;\n    //     } else {\n    //         status = false;\n    //     }\n\n    //     typeArr.forEach((item) => {\n    //         if (!(target instanceof item)) {\n    //             value = false;\n    //         }\n    //     });\n\n    //     if (value == false) {\n    //         status = false;\n    //     }\n    // }\n\n    // return status;\n}\n\nfunction eventBinding($node, type, fn, useCapture = false, _0 = typeCheckThrow($node, \"*\"), _1 = typeCheckThrow(type, \"string\"), _2 = typeCheckThrow(fn, \"function\"), _3 = typeCheckThrow(useCapture, \"boolean\")) {\n    let typeList = type.split(\",\");\n\n    if ($node.forEach != undefined) {\n        $node.forEach(($item) => {\n            typeList.forEach((eventName) => {\n                $item.addEventListener(eventName, fn, true);\n            });\n        });\n    } else if ($node.addEventListener != undefined) {\n        typeList.forEach((eventName) => {\n            $node.addEventListener(eventName, fn, true);\n        });\n    }\n}\n\nfunction removeEvent($node, type, fn, _0 = typeCheckThrow($node, \"object\"), _1 = typeCheckThrow(type, \"string\"), _2 = typeCheckThrow(fn, \"function\")) {\n    let typeList = type.split(\",\");\n\n    if ($node.forEach != undefined) {\n        $node.forEach(($item) => {\n            typeList.forEach((eventName) => {\n                $item.removeEventListener(eventName, fn, true);\n            });\n        });\n    } else {\n        typeList.forEach((eventName) => {\n            $node.removeEventListener(eventName, fn, true);\n        });\n    }\n}\n\nfunction classControl($node, action, className, _0 = typeCheckThrow($node, \"*\"), _1 = typeCheckThrow(action, \"string\"), _2 = typeCheckThrow(className, \"string\")) {\n    if ($node.forEach != undefined) {\n        $node.forEach(($item) => {\n            if (action == \"add\") {\n                $item.classList.add(className);\n            } else if (action == \"remove\") {\n                $item.classList.remove(className);\n            } else if (action == \"toggle\") {\n                $item.classList.toggle(className);\n            }\n        });\n    } else if ($node.addEventListener != undefined) {\n        if (action == \"add\") {\n            $node.classList.add(className);\n        } else if (action == \"remove\") {\n            $node.classList.remove(className);\n        } else if (action == \"toggle\") {\n            $node.classList.toggle(className);\n        }\n    }\n}\n\nfunction hasClass($node, className, _0 = typeCheckThrow($node, \"node\"), _1 = typeCheckThrow(className, \"string\")) {\n    let value = false;\n    let nameList = className.split(\".\");\n\n    nameList.some((name) => {\n        if (name !== \"\") {\n            if ($node.classList.contains(name)) {\n                value = true;\n            } else {\n                value = false;\n            }\n\n            return value == false;\n        }\n    });\n\n    return value;\n}\n\nfunction fetchURL(url, option = {}, type = \"form\", _0 = typeCheckThrow(url, \"string\"), _1 = typeCheckThrow(option, \"object\"), _2 = typeCheckThrow(type, \"string\")) {\n    let formData = new FormData();\n    let csrfHeader = Object.entries(condition.csrfHeader);\n\n    if (type == \"json\") {\n        for (let key in option.body) {\n            formData.append(key, option.body[key]);\n        }\n\n        option.body = formData;\n    }\n\n    if (csrfHeader.length > 0) {\n        option.headers = new Headers(condition.csrfHeader);\n    }\n\n    return fetch(url, option)\n        .then((res) => {\n            if (res.ok == false) {\n                throw new Error(message.serverNotWorking);\n            }\n\n            return res.json();\n        })\n        .catch((error) => {\n            return {\n                respon: false,\n                error: error,\n            };\n        });\n}\n\nfunction upperFirstChar(text, _0 = typeCheckThrow(text, \"string\")) {\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nfunction isMobile() {\n    if (condition.windowWidth < condition.changePoint) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction hasValueArrToArr(baseArr, inputArr, _0 = typeCheckThrow(baseArr, \"array\"), _1 = typeCheckThrow(inputArr, \"array\")) {\n    let boolean = false;\n\n    inputArr.forEach((item) => {\n        if (baseArr.indexOf(item) > -1) {\n            boolean = true;\n        }\n    });\n\n    return boolean;\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/default.js?");

/***/ }),

/***/ "./common/js/module/event.js":
/*!***********************************!*\
  !*** ./common/js/module/event.js ***!
  \***********************************/
/*! exports provided: setEvent, bindingScrollEvent, setEmoticonBtnEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEvent\", function() { return setEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindingScrollEvent\", function() { return bindingScrollEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEmoticonBtnEvent\", function() { return setEmoticonBtnEvent; });\nconst { typeCheckThrow, eventBinding, classControl, hasClass, fetchURL, isMobile } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getElement, findParentByClass, getChild, findContenteditable } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { setScroll, getScrollInfo } = __webpack_require__(/*! ./scroll */ \"./common/js/module/scroll.js\");\nconst { getDefaultBlockHTML, getYoutubeBlock, getCodepenBlock, getLinkboxBlock, getEmoticonBlockHTML, addBlockToContent, getImageBlockHTML, getContentData } = __webpack_require__(/*! ./layout */ \"./common/js/module/layout.js\");\nconst { itemClickEvent, itemKeyboardEvent, itemStructureValidation, nodeEffect, textStylingNode, changeTableCell, itemMove, removeNodeEffect } = __webpack_require__(/*! ./item */ \"./common/js/module/item.js\");\nconst { openFile, fileUpload, mediaNameUpdate } = __webpack_require__(/*! ./file */ \"./common/js/module/file.js\");\nconst { openPop, closeOptionPop, openOptionPop, openLinkPop } = __webpack_require__(/*! ./pop */ \"./common/js/module/pop.js\");\nconst { contentPasteEvent } = __webpack_require__(/*! ./clipboard */ \"./common/js/module/clipboard.js\");\nconst { isTextSelect } = __webpack_require__(/*! ./cursor */ \"./common/js/module/cursor.js\");\nconst { jsonToHtml } = __webpack_require__(/*! ./convertor */ \"./common/js/module/convertor.js\");\nconst { message } = __webpack_require__(/*! ./message */ \"./common/js/module/message.js\");\n\nfunction setEvent() {\n    setGlobalEvent();\n    setMenuEvent();\n    setScroll();\n    setContentEvent();\n    setOptionEvent();\n}\n\nfunction setGlobalEvent() {\n    // window size update & option pop close\n    let resizeFn;\n    eventBinding(window, \"resize\", function () {\n        clearTimeout(resizeFn);\n        resizeFn = setTimeout(() => {\n            condition.windowWidth = window.innerWidth;\n            condition.windowHeight = window.innerHeight;\n            condition.popOption.removeAttribute(\"style\");\n            classControl(condition.popOption, \"remove\", \"--act\");\n        }, 250);\n    });\n\n    // modal\n    eventBinding(document, \"mousedown\", function (e) {\n        let $target = e.target;\n        let $list = getElement(\".djs-trigger.--act\");\n        let checkTrigger = findParentByClass($target, \"djs-trigger\") == null ? false : true;\n        let checkBtn = findParentByClass($target, \"djs-btn-ignore\") == null ? false : true;\n\n        if (checkBtn == false && checkTrigger == false) {\n            if ($list.length > 0) {\n                classControl($list, \"remove\", \"--act\");\n            }\n        }\n\n        closeOptionPop(e.target);\n    });\n\n    // toggle target event\n    eventBinding(condition.btnToggleTarget, \"click\", function (e) {\n        let targetName = this.dataset[\"target\"];\n        let $target = getElement(targetName, false);\n        let $itemList = getElement(\".djs-trigger.--act\");\n        let hasScroll = hasClass($target, \".djs-scroll\");\n\n        $itemList.forEach(($item) => {\n            if ($item !== $target) {\n                classControl($item, \"remove\", \"--act\");\n\n                if (hasScroll == true) {\n                    let scrollContent = $target.querySelector(\".djs-scroll-content\");\n                    scrollContent.scrollTo(0, 0);\n                }\n            }\n        });\n\n        classControl($target, \"toggle\", \"--act\");\n    });\n}\n\nfunction setMenuEvent() {\n    if (condition.uploadURL !== \"\") {\n        eventBinding(condition.uploadInput, \"change\", function () {\n            fileUpload();\n        });\n    }\n\n    if (condition.multiLang == true) {\n        // change language event\n        eventBinding(condition.btnChangeLang, \"click\", function () {\n            let lang = this.dataset[\"value\"];\n            let data = getContentData();\n            let html;\n\n            classControl(condition.btnChangeLang, \"remove\", \"--act\");\n            classControl(this, \"add\", \"--act\");\n\n            condition.contentData[condition.lang] = data;\n\n            if (condition.contentData[lang].length == 0) {\n                let duplicate = confirm(message.noContentData(lang));\n\n                if (duplicate == true) {\n                    condition.contentData[lang] = data;\n                } else {\n                    condition.contentData[lang] = condition.defaultContentData;\n                }\n            }\n\n            html = jsonToHtml(condition.contentData[lang]);\n\n            condition.activeItem = condition.wrap;\n            condition.activeElement = condition.wrap;\n            condition.lang = lang;\n            condition.areaContent.innerHTML = html;\n            condition.triggerLangChange(lang);\n        });\n    }\n\n    // device switch event\n    eventBinding(condition.btnSwitchDevice, \"click\", function () {\n        classControl(condition.areaContent, \"toggle\", \"--mobile\");\n        classControl(this, \"toggle\", \"--act\");\n    });\n\n    // add block(item) event\n    eventBinding(condition.btnAddBlock, \"click\", function () {\n        let type = this.dataset[\"type\"];\n        let value = this.dataset[\"value\"];\n\n        if (type == \"block\") {\n            let block = getDefaultBlockHTML(value);\n\n            addBlockToContent(block);\n            openOptionPop();\n        } else if (type == \"pop\") {\n            openPop(value, this);\n        } else if (type == \"file\") {\n            openFile(value);\n        } else if (type == \"custom\") {\n            condition.defaultMenu[value].fn();\n        }\n    });\n\n    // add link(linkbox, youtube, codepen, link) event\n    eventBinding(condition.btnLinkbox, \"click\", async function () {\n        let $input = getChild(condition.popLinkbox, \".djs-input\", false);\n        let value = $input.value;\n        let type = this.dataset[\"value\"];\n        let boolean = false;\n        let html;\n\n        if (type == \"linkbox\") {\n            let data = {};\n\n            if (condition.regList[\"defaultURL\"].test(value)) {\n                classControl(this, \"add\", \"--ing\");\n\n                if (condition.linkBoxApi === \"\") {\n                    let request = await fetchURL(`https://api.allorigins.win/get?url=${value}`);\n\n                    if (request.response !== false) {\n                        let text = request.contents;\n                        let regTitleCheck = new RegExp('property=\\\\\"og:title\\\\\"', \"g\");\n                        let regTitle01 = new RegExp('([^])*\\\\<title>([^\"]*)<\\\\/title>([^]*)', \"g\");\n                        let regTitle02 = new RegExp('([^]*)\\\\<meta property=\\\\\"og:title\\\\\" content=\\\\\"([^\"]*)(?=\\\\\")\"([^]*)', \"g\");\n                        let regImgCheck = new RegExp('property=\\\\\"og:image\\\\\"', \"g\");\n                        let regImg01 = new RegExp('([^])*\\\\<meta name=\\\\\"image\\\\\" content=\\\\\"([^\"]*)\"\\\\>([^]*)', \"g\");\n                        let regImg02 = new RegExp('([^])*\\\\<meta property=\\\\\"og:image\\\\\" content=\\\\\"([^\"]*)(?=\\\\\")([^]*)', \"g\");\n                        let regDecripCheck = new RegExp('property=\\\\\"og:description\\\\\"', \"g\");\n                        let regDecrip01 = new RegExp('([^])*\\\\<meta name=\\\\\"description\\\\\" content=\\\\\"([^\"]*)(?=\\\\\")([^]*)', \"g\");\n                        let regDecrip02 = new RegExp('([^])*\\\\<meta property=\\\\\"og:description\\\\\" content=\\\\\"([^\"]*)(?=\\\\\")([^]*)', \"g\");\n\n                        if (regTitleCheck.test(text) == true) {\n                            data.title = text.replace(regTitle02, \"$2\");\n                        } else {\n                            data.title = text.replace(regTitle01, \"$2\");\n                        }\n\n                        if (regImgCheck.test(text) == true) {\n                            data.img = text.replace(regImg02, \"$2\");\n                        } else {\n                            let img = text.replace(regImg01, \"$2\");\n                            if (img.length > 500) {\n                                data.img = \"\";\n                            } else {\n                                data.img = img;\n                            }\n                        }\n\n                        if (regDecripCheck.test(text) == true) {\n                            data.description = text.replace(regDecrip02, \"$2\");\n                        } else {\n                            let description = text.replace(regDecrip01, \"$2\");\n                            if (description.length > 500) {\n                                data.description = \"\";\n                            } else {\n                                data.description = description;\n                            }\n                        }\n\n                        if (value.indexOf(\"://\") > -1) {\n                            data.domain = value.split(\"/\")[2];\n                        } else {\n                            data.domain = value.split(\"/\")[0];\n                        }\n\n                        data.domain = data.domain.split(\":\")[0];\n\n                        data.url = value;\n\n                        html = getLinkboxBlock(data);\n                        boolean = true;\n                    } else {\n                        console.error(request.error);\n                        alert(message.apiNotWorking);\n                    }\n                } else {\n                    let request = await fetchURL(condition.linkBoxApi, {\n                        method: \"POST\",\n                        body: {\n                            url: value,\n                        },\n                    });\n\n                    if (request.response == true) {\n                        request.data.url = value;\n                        html = getLinkboxBlock(request.data);\n                        boolean = true;\n                    } else {\n                        alert(request.error.message);\n                    }\n                }\n\n                classControl(this, \"remove\", \"--ing\");\n            }\n        } else if (type == \"youtube\") {\n            if (condition.regList[\"youtubeURL\"].test(value)) {\n                let code = value.replace(condition.regList[\"youtubeCode\"], \"$7\");\n\n                html = getYoutubeBlock(code);\n                boolean = true;\n            }\n        } else if (type == \"codepen\") {\n            if (condition.regList[\"codepenURL\"].test(value)) {\n                let nickname = value.replace(condition.regList[\"codepenCode\"], \"$2\");\n                let code = value.replace(condition.regList[\"codepenCode\"], \"$4\");\n\n                html = getCodepenBlock(nickname, code);\n                boolean = true;\n            }\n        } else if (type == \"word\") {\n            let $tag = condition.baseNode.parentNode;\n\n            $tag.insertAdjacentHTML(\"afterend\", `<span>${$tag.textContent}</span>`);\n            $tag.remove();\n\n            itemStructureValidation();\n            classControl(condition.popLinkbox, \"remove\", \"--act\");\n        } else if (type == \"link\") {\n            if (condition.regList[\"defaultURL\"].test(value)) {\n                nodeEffect(\"link\", value);\n                boolean = true;\n            }\n        }\n\n        if (boolean == true) {\n            if (type != \"link\") {\n                addBlockToContent(html);\n            }\n            $input.value = \"\";\n            classControl(condition.popLinkbox, \"remove\", \"--act\");\n        } else {\n            if (type != \"word\") {\n                classControl(condition.popLinkbox, \"add\", \"--wrong\");\n                $input.focus();\n                setTimeout(() => {\n                    classControl(condition.popLinkbox, \"remove\", \"--wrong\");\n                }, 1000);\n            }\n        }\n    });\n\n    eventBinding(getChild(condition.popLinkbox, \".djs-input\", false), \"keydown\", function (e) {\n        if (e.code == \"Enter\") {\n            let event = document.createEvent(\"HTMLEvents\");\n            event.initEvent(\"click\", true, false);\n            condition.btnLinkbox.dispatchEvent(event);\n        }\n    });\n\n    // media event\n    eventBinding(condition.listMedia, \"click\", async function (e) {\n        let $editableNode = getChild(this, `*[contenteditable=\"true\"]`);\n        let $item = findParentByClass(e.target, \"djs-media\");\n        let type = \"\";\n        let idx = \"\";\n        let data;\n\n        if ($editableNode.length > 0) {\n            $editableNode.forEach((node) => {\n                mediaNameUpdate(node);\n            });\n        }\n\n        if ($item != null) {\n            let $area = getChild($item, \".djs-add-media\", false);\n            data = {\n                src: $area.dataset[\"src\"],\n                alt: $area.dataset[\"alt\"],\n                hasWebp: $area.dataset[\"webp\"],\n                defaultFormat: $area.dataset[\"defaultFormat\"],\n                webp: $area.dataset[\"webp\"],\n                width: parseInt($area.dataset[\"width\"]),\n                height: parseInt($area.dataset[\"height\"]),\n            };\n\n            type = $item.dataset[\"type\"];\n            idx = $item.dataset[\"idx\"];\n        }\n\n        if (type == \"image\") {\n            switch (true) {\n                case findParentByClass(e.target, \"djs-add-media\") !== null:\n                    let setWidth = 700;\n                    let block;\n\n                    if (isMobile() == true) {\n                        setWidth = 300;\n                    } else {\n                        if (data.width < data.height) {\n                            setWidth = 400;\n                        }\n                    }\n                    block = getImageBlockHTML(data, setWidth);\n\n                    addBlockToContent(block);\n                    break;\n                case findParentByClass(e.target, \"djs-del-media\") !== null:\n                    let url = condition.uploadURL;\n                    let lastStrIsSlat = url.substr(url.length - 1, url.length) == \"/\" ? true : false;\n\n                    if (lastStrIsSlat == false) {\n                        url += \"/\";\n                    }\n\n                    let request = await fetchURL(`${url}${idx}`, {\n                        method: \"DELETE\",\n                    });\n\n                    if (request.response == true) {\n                        let $blockList = getChild(condition.areaContent, `img[src=\"${data.src}.${data.defaultFormat}\"]`);\n\n                        $blockList.forEach(($img) => {\n                            let $block = findParentByClass($img, \"djs-item\");\n                            $block.remove();\n                        });\n                        $item.remove();\n                        condition.activeItem = condition.wrap;\n                    } else {\n                        alert(request.error.message);\n                    }\n                    break;\n                case findParentByClass(e.target, \"djs-name\") !== null:\n                    let $textEl = findParentByClass(e.target, \"djs-name\");\n                    $textEl.setAttribute(\"contenteditable\", \"true\");\n                    $textEl.focus();\n                    $textEl.dataset[\"preText\"] = $textEl.textContent;\n                    break;\n            }\n        }\n    });\n\n    eventBinding(condition.listMedia, \"keydown\", function (e) {\n        let isTextField = findParentByClass(e.target, \"djs-name\") !== null ? true : false;\n\n        if (e.code == \"Enter\" && isTextField == true) {\n            e.preventDefault();\n            mediaNameUpdate(e.target);\n        }\n    });\n}\n\nfunction bindingScrollEvent($wrap, _0 = typeCheckThrow($wrap, \"node\")) {\n    let $content = getChild($wrap, \".djs-scroll-content\", false);\n    let $bar = getChild($wrap, \".djs-scroll-bar\", false);\n    let value = getScrollInfo($wrap);\n    let status = {\n        activity: false,\n        mouseY: 0,\n        scrollY: 0,\n    };\n\n    eventBinding($content, \"scroll\", function () {\n        let scrollTop = this.scrollTop;\n        let scrollPercent = Math.floor((100 / value.maxScrollTop) * scrollTop);\n        let barTop = Math.floor((scrollPercent / 100) * value.maxBarTop);\n\n        $bar.style.transform = `translateY(${barTop}px)`;\n    });\n\n    eventBinding($wrap, \"mousemove\", function (e) {\n        if (status.activity == true) {\n            let value = -(status.mouseY - e.clientY);\n            let contentScroll = status.scrollY + value * 2;\n\n            $content.scrollTo(0, contentScroll);\n        }\n    });\n\n    eventBinding($bar, \"mousedown\", function (e) {\n        status.activity = true;\n        status.mouseY = e.clientY;\n        status.scrollY = $content.scrollTop;\n    });\n\n    eventBinding($wrap, \"mouseup\", function () {\n        status.activity = false;\n    });\n}\n\nfunction setEmoticonBtnEvent() {\n    condition.btnEmoticon = getChild(condition.listEmoticon, \".djs-add-emoticon\");\n\n    eventBinding(condition.btnEmoticon, \"click\", function () {\n        let code = this.innerHTML.trim();\n        let block = getEmoticonBlockHTML(code);\n\n        addBlockToContent(block);\n    });\n}\n\nfunction setContentEvent() {\n    let status = {\n        resize: false,\n        client: {\n            x: 0,\n            y: 0,\n        },\n        type: \"\",\n        item: \"\",\n        position: \"\",\n    };\n\n    eventBinding(condition.areaContent, \"paste\", function (e) {\n        contentPasteEvent(e);\n    });\n\n    eventBinding(condition.areaContent, \"mousedown,touchstart\", function (e) {\n        let $target = e.target;\n        let hasClass = $target.classList.contains(\"djs-resize\");\n\n        if (hasClass == true) {\n            if (isMobile() == true) {\n                status.client.x = Math.floor(e.touches[0].clientX);\n                status.client.y = Math.floor(e.touches[0].clientY);\n            } else {\n                status.client.x = e.clientX;\n                status.client.y = e.clientY;\n            }\n\n            status.resize = true;\n            status.item = findParentByClass($target, \"djs-item\");\n            status.type = status.item.dataset[\"type\"];\n            status.position = $target.dataset[\"position\"];\n\n            if (status.type == \"image\") {\n                status.target = getChild(status.item, \".djs-size\", false);\n                status.defaultValue = parseInt(status.target.dataset[\"width\"]);\n            } else if (status.type == \"codepen\") {\n                status.target = getChild(status.item, \".djs-iframe\", false);\n                status.defaultValue = parseInt(status.target.height);\n                classControl(status.item, \"add\", \"--act\");\n            }\n        }\n    });\n\n    eventBinding(condition.areaContent, \"mousemove,touchmove\", function (e) {\n        if (status.resize == true) {\n            let clientX, clientY;\n\n            if (isMobile() == true) {\n                clientX = Math.floor(e.touches[0].clientX);\n                clientY = Math.floor(e.touches[0].clientY);\n            } else {\n                clientX = e.clientX;\n                clientY = e.clientY;\n            }\n\n            if (status.type == \"image\") {\n                let diff;\n\n                if (status.position == \"left\") {\n                    diff = clientX - status.client.x;\n                } else if (status.position == \"right\") {\n                    diff = status.client.x - clientX;\n                }\n\n                let multiple = Math.floor(diff / 50);\n                let count = 50 * multiple;\n                let width = status.defaultValue - count;\n\n                if (width > condition.maxImageWidth) {\n                    width = condition.maxImageWidth;\n                } else if (width < 50) {\n                    width = 50;\n                }\n\n                status.target.dataset[\"width\"] = width;\n            } else if (status.type == \"codepen\") {\n                let diff = status.client.y - clientY;\n                let multiple = Math.floor(diff / 50);\n                let count = 50 * multiple;\n                let height = status.defaultValue - count;\n\n                if (height < 300) {\n                    height = 300;\n                } else if (height > condition.maxCodepenHeight) {\n                    height = condition.maxCodepenHeight;\n                }\n\n                status.target.height = height;\n            }\n        }\n    });\n\n    eventBinding(condition.areaContent, \"mouseup,touchend\", function (e) {\n        status.resize = false;\n\n        if (status.type == \"codepen\") {\n            classControl(status.item, \"remove\", \"--act\");\n        }\n\n        itemClickEvent(e);\n    });\n\n    // 키보드 이벤트\n    eventBinding(condition.areaContent, \"keydown\", function (e) {\n        itemKeyboardEvent(e);\n    });\n\n    // let contentKeyupFn;\n    eventBinding(condition.areaContent, \"keyup\", function (e) {\n        itemClickEvent(e);\n        // clearTimeout(contentKeyupFn);\n        // contentKeyupFn = setTimeout(() => {\n        //     codeBlockHighlight(e);\n        // }, 250);\n    });\n}\n\nfunction setOptionEvent() {\n    // font size event\n    eventBinding(condition.btnFontSize, \"click\", function () {\n        let $btn = getElement(\".djs-fontsize\", false);\n        let value = this.dataset[\"value\"];\n        let text = this.textContent;\n        let event = document.createEvent(\"HTMLEvents\");\n        event.initEvent(\"click\", true, false);\n\n        if (isTextSelect() == true) {\n            nodeEffect(\"fontSize\", value);\n\n            getChild($btn, \".djs-text\", false).textContent = text;\n        } else {\n            let constructorName = condition.baseNode.constructor.name;\n            let $target;\n\n            if (constructorName == \"Text\") {\n                $target = condition.baseNode.parentNode;\n            } else {\n                $target = condition.baseNode;\n            }\n\n            if (condition.defaultFontSize == parseInt(value)) {\n                $target.removeAttribute(\"data-font-size\");\n                itemStructureValidation();\n            } else {\n                $target.setAttribute(\"data-font-size\", value);\n            }\n            getChild($btn, \".djs-text\", false).textContent = text;\n            $target.focus();\n        }\n\n        $btn.dispatchEvent(event);\n    });\n\n    // color event\n    eventBinding(condition.btnColor, \"click\", function () {\n        let $btn = getElement(\".djs-color\", false);\n        let value = this.dataset[\"value\"];\n        let event = document.createEvent(\"HTMLEvents\");\n        event.initEvent(\"click\", true, false);\n\n        if (isTextSelect() == true) {\n            nodeEffect(\"color\", value);\n\n            $btn.dataset[\"value\"] = value;\n        } else {\n            let constructorName = condition.baseNode.constructor.name;\n            let $target;\n\n            if (constructorName == \"Text\") {\n                $target = condition.baseNode.parentNode;\n            } else {\n                $target = condition.baseNode;\n            }\n\n            if (condition.defaultColor == value) {\n                $target.removeAttribute(\"data-color\");\n                itemStructureValidation();\n            } else {\n                $target.setAttribute(\"data-color\", value);\n            }\n            $btn.dataset[\"value\"] = value;\n            $target.focus();\n        }\n\n        $btn.dispatchEvent(event);\n    });\n\n    // align event\n    eventBinding(condition.btnAlign, \"click\", function () {\n        let $target = findContenteditable(condition.baseNode);\n        let value = this.dataset[\"value\"];\n        let isAct = this.classList.contains(\"--act\");\n\n        if ($target == null) {\n            $target = findParentByClass(condition.baseNode, \"djs-item\");\n        }\n\n        if (isAct == true) {\n            $target.removeAttribute(\"data-align\");\n            classControl(this, \"remove\", \"--act\");\n        } else {\n            $target.setAttribute(\"data-align\", value);\n            classControl(condition.btnAlign, \"remove\", \"--act\");\n            classControl(this, \"add\", \"--act\");\n        }\n    });\n\n    // bold event\n    eventBinding(condition.btnToggleBold, \"click\", function () {\n        textDecorationEvent(this, \"bold\", \"B\");\n    });\n\n    // italic event\n    eventBinding(condition.btnToggleItalic, \"click\", function () {\n        textDecorationEvent(this, \"italic\", \"I\");\n    });\n\n    // underline event\n    eventBinding(condition.btnToggleUnderline, \"click\", function () {\n        textDecorationEvent(this, \"underline\", \"U\");\n    });\n\n    // strikethrough event\n    eventBinding(condition.btnToggleStrikethrough, \"click\", function () {\n        textDecorationEvent(this, \"strikethrough\", \"DEL\");\n    });\n\n    // list style event\n    eventBinding(condition.btnListType, \"click\", function () {\n        let $item = findParentByClass(condition.baseNode, \"djs-item\");\n        let value = this.dataset[\"value\"];\n\n        $item.dataset[\"style\"] = value;\n    });\n\n    // table change event\n    eventBinding(condition.btnTableHeader, \"click\", function () {\n        changeTableCell(\"th\");\n    });\n\n    eventBinding(condition.btnTableBody, \"click\", function () {\n        changeTableCell(\"td\");\n    });\n\n    // code theme event\n    eventBinding(condition.btnThemeSet, \"click\", function () {\n        let $item = findParentByClass(condition.baseNode, \"djs-item\");\n        let value = this.dataset[\"value\"];\n        let $btn = getElement(\".djs-code-theme\", false);\n        let event = document.createEvent(\"HTMLEvents\");\n        event.initEvent(\"click\", true, false);\n\n        $item.dataset[\"theme\"] = value;\n        $btn.dispatchEvent(event);\n    });\n\n    // code lang event\n    eventBinding(condition.btnLangSet, \"click\", function () {\n        let $item = findParentByClass(condition.baseNode, \"djs-item\");\n        let $editableItem = findContenteditable(condition.baseNode);\n        let value = this.dataset[\"value\"];\n        let $btn = getElement(\".djs-code-lang\", false);\n        let text = getElement(\".djs-code-lang .djs-text\", false);\n        let event = document.createEvent(\"HTMLEvents\");\n        event.initEvent(\"click\", true, false);\n\n        if (value == \"text\") {\n            value = \"nohighlight\";\n        }\n\n        $item.dataset[\"lang\"] = value;\n        $editableItem.classList = `${value} editor-code djs-code`;\n        $editableItem.textContent = $editableItem.textContent;\n        hljs.highlightBlock($editableItem);\n\n        if (value == \"nohighlight\") {\n            text.textContent = \"text\";\n            $item.dataset[\"lang\"] = \"text\";\n        } else {\n            text.textContent = value;\n        }\n\n        $btn.dispatchEvent(event);\n        $editableItem.focus();\n        condition.baseNode = $editableItem;\n    });\n\n    // move item event\n    eventBinding(condition.btnItemMobeUp, \"click\", function () {\n        itemMove(\"up\");\n    });\n\n    eventBinding(condition.btnItemMobeDown, \"click\", function () {\n        itemMove(\"down\");\n    });\n\n    // word block event\n    eventBinding(condition.btnWordBlock, \"click\", function () {\n        let isAct = this.classList.contains(\"--act\");\n\n        if (isTextSelect() == true) {\n            nodeEffect(\"wordblock\");\n        } else {\n            textStylingNode(\"wordblock\", \"CODE\", isAct);\n        }\n\n        classControl(this, \"toggle\", \"--act\");\n    });\n\n    // open word link pop\n    eventBinding(condition.btnWordLink, \"click\", function () {\n        let isAct = this.classList.contains(\"--act\");\n        let $node, nodeOffset;\n        let offset = {};\n\n        if (condition.baseNode.constructor.name == \"Text\") {\n            $node = condition.baseNode.parentNode;\n        } else {\n            $node = condition.baseNode;\n        }\n        nodeOffset = $node.getBoundingClientRect();\n\n        offset.top = nodeOffset.top - 37;\n        offset.right = nodeOffset.right + 230;\n        offset.width = nodeOffset.width;\n\n        classControl(condition.popOption, \"remove\", \"--act\");\n        if (isAct == true) {\n            openLinkPop(\"word\", offset);\n        } else {\n            openLinkPop(\"link\", offset);\n        }\n    });\n\n    // item delete event\n    eventBinding(condition.btnItemDelete, \"click\", function () {\n        let $item = findParentByClass(condition.baseNode, \"djs-item\");\n        let itemCount = condition.areaContent.childElementCount;\n        $item.remove();\n        condition.activeItem = condition.wrap;\n\n        classControl(condition.popOption, \"remove\", \"--act\");\n        if (itemCount == 1) {\n            condition.areaContent.insertAdjacentHTML(\"beforeend\", getDefaultBlockHTML(\"textBlock\"));\n        }\n    });\n}\n\nfunction textDecorationEvent($btn, type, tagName, _0 = typeCheckThrow($btn, \"node\"), _1 = typeCheckThrow(type, \"string\"), _2 = typeCheckThrow(tagName, \"string\")) {\n    let isAct = $btn.classList.contains(\"--act\");\n    let $editable = findContenteditable(condition.baseNode);\n\n    if ($editable.textContent != \"\") {\n        if (isTextSelect() == true) {\n            if (isAct == true) {\n                removeNodeEffect(type, tagName);\n            } else {\n                nodeEffect(type);\n            }\n        } else {\n            textStylingNode(type, tagName, isAct);\n        }\n\n        classControl($btn, \"toggle\", \"--act\");\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/event.js?");

/***/ }),

/***/ "./common/js/module/file.js":
/*!**********************************!*\
  !*** ./common/js/module/file.js ***!
  \**********************************/
/*! exports provided: openFile, fileUpload, mediaNameUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openFile\", function() { return openFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fileUpload\", function() { return fileUpload; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mediaNameUpdate\", function() { return mediaNameUpdate; });\nconst { typeCheckThrow, fetchURL, isMobile } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { setMediaList, getImageBlockHTML, addBlockToContent } = __webpack_require__(/*! ./layout */ \"./common/js/module/layout.js\");\nconst { findParentByClass, getChild } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\n\nfunction openFile(type, _0 = typeCheckThrow(type, \"string\")) {\n    switch (type) {\n        case \"imageBlock\":\n            condition.uploadForm.dataset[\"type\"] = \"image\";\n            condition.uploadInput.setAttribute(\"accept\", \"image/*\");\n            break;\n        default:\n            condition.uploadForm.dataset[\"type\"] = \"default\";\n            condition.uploadInput.removeAttribute(\"accept\");\n    }\n\n    condition.uploadInput.click();\n}\n\nasync function fileUpload() {\n    let $form = condition.uploadForm;\n    let formData = new FormData($form);\n\n    formData.append(\"type\", $form.dataset[\"type\"]);\n    formData.append(\"articleIdx\", condition.articleIdx);\n    formData.append(\"articleTempIdx\", condition.articleTempIdx);\n\n    let request = await fetchURL(condition.uploadURL, {\n        method: \"POST\",\n        body: formData,\n    });\n\n    if (request.response == true) {\n        setMediaList(request.list);\n\n        request.list.forEach((item) => {\n            let setWidth = 700;\n            let block;\n\n            if (isMobile() == true) {\n                setWidth = 300;\n            } else {\n                if (item.width < item.height) {\n                    setWidth = 400;\n                }\n            }\n\n            block = getImageBlockHTML(item, setWidth);\n\n            addBlockToContent(block);\n        });\n\n        condition.uploadInput.value = \"\";\n    } else {\n        alert(request.error.message);\n    }\n}\n\nasync function mediaNameUpdate($node, _0 = typeCheckThrow($node, \"node\")) {\n    let $field = findParentByClass($node, \"djs-name\");\n    let $item = findParentByClass($node, \"djs-media\");\n    let text = $field.textContent;\n    let preText = $field.dataset[\"preText\"];\n    let idx = $item.dataset[\"idx\"];\n\n    $field.scrollTo(0, 0);\n    $field.removeAttribute(\"contenteditable\");\n    $field.removeAttribute(\"data-pre-text\");\n\n    let request = await fetchURL(\n        condition.uploadURL,\n        {\n            method: \"PUT\",\n            body: {\n                imageName: text,\n                imageIdx: idx,\n            },\n        },\n        \"json\",\n    );\n\n    if (request.response == true) {\n        let $childs = getChild(condition.areaContent, `img[alt=\"${preText}\"]`);\n\n        $childs.forEach(($child) => {\n            $child.setAttribute(\"alt\", text);\n        });\n    } else {\n        alert(request.error.message);\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/file.js?");

/***/ }),

/***/ "./common/js/module/item.js":
/*!**********************************!*\
  !*** ./common/js/module/item.js ***!
  \**********************************/
/*! exports provided: itemClickEvent, getItemType, itemKeyboardEvent, wrappingNode, brokenNode, margeNode, nodeEffect, removeNodeEffect, textStylingNode, changeTableCell, itemMove, itemStructureValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemClickEvent\", function() { return itemClickEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemType\", function() { return getItemType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemKeyboardEvent\", function() { return itemKeyboardEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrappingNode\", function() { return wrappingNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"brokenNode\", function() { return brokenNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"margeNode\", function() { return margeNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeEffect\", function() { return nodeEffect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeNodeEffect\", function() { return removeNodeEffect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"textStylingNode\", function() { return textStylingNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeTableCell\", function() { return changeTableCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemMove\", function() { return itemMove; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemStructureValidation\", function() { return itemStructureValidation; });\nconst { typeCheckThrow, classControl } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { openOptionPop } = __webpack_require__(/*! ./pop */ \"./common/js/module/pop.js\");\nconst { contentEnterKeyEvent, contentTabKeyEvent, contentBackspaceKeyEvent } = __webpack_require__(/*! ./keyboard */ \"./common/js/module/keyboard.js\");\nconst { getTextItemOption, setTextItemOption } = __webpack_require__(/*! ./option */ \"./common/js/module/option.js\");\nconst { setCursor, isTextSelect } = __webpack_require__(/*! ./cursor */ \"./common/js/module/cursor.js\");\nconst { findParentByClass, findContenteditable, getChild, getElement } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { hasBaseNode, setSelection } = __webpack_require__(/*! ./selection */ \"./common/js/module/selection.js\");\nconst { getTextBlockHTML } = __webpack_require__(/*! ./layout */ \"./common/js/module/layout.js\");\nconst { message } = __webpack_require__(/*! ./message */ \"./common/js/module/message.js\");\n\nfunction itemClickEvent(e, _0 = typeCheckThrow(e, \"event\")) {\n    let $target = e.target;\n    let $item = findParentByClass($target, \"djs-item\");\n    let $editableItem = findContenteditable($target);\n\n    if ($item !== null || $editableItem !== null) {\n        let $selectedItem = getElement(\".--djs-selected\");\n\n        if ($selectedItem.length > 0) {\n            classControl($selectedItem, \"remove\", \"--djs-selected\");\n        }\n        classControl($item, \"add\", \"--djs-selected\");\n\n        condition.activeItem = $item;\n        condition.activeElement = $editableItem;\n        condition.baseNode = $target;\n\n        openOptionPop();\n    }\n}\n\nfunction getItemType($item, $editableItem) {\n    let typeArr = [\"all\"];\n    let itemType = $item.dataset[\"type\"];\n\n    if ($editableItem !== null) {\n        if (hasBaseNode() == true) {\n            let $node;\n\n            setSelection();\n\n            if (condition.baseNode.constructor.name == \"Text\") {\n                $node = condition.baseNode.parentNode;\n            } else {\n                $node = condition.baseNode;\n            }\n\n            switch ($editableItem.constructor.name) {\n                case \"HTMLLIElement\":\n                    typeArr.push(\"li\");\n                    break;\n\n                case \"HTMLTableCellElement\":\n                    if ($editableItem.tagName == \"TD\") {\n                        typeArr.push(\"td\");\n                    } else if ($editableItem.tagName == \"TH\") {\n                        typeArr.push(\"th\");\n                    }\n                    break;\n            }\n\n            classControl(condition.btnWordLink, \"remove\", \"--act\");\n            classControl(condition.btnWordBlock, \"remove\", \"--act\");\n\n            switch ($node.tagName) {\n                case \"A\":\n                    typeArr.push(\"link\");\n                    classControl(condition.btnWordLink, \"add\", \"--act\");\n                    break;\n                case \"CODE\":\n                    if (itemType != \"codeblock\") {\n                        typeArr.push(\"wordblock\");\n                        classControl(condition.btnWordBlock, \"add\", \"--act\");\n                    }\n                    break;\n            }\n\n            if (isTextSelect() == true) {\n                let nodeName = condition.baseNode.constructor.name;\n\n                if (itemType != \"codeblock\") {\n                    if ((nodeName = \"HTMLAnchorElement\")) {\n                        typeArr.push(\"link\");\n                    }\n\n                    typeArr.push(\"word\");\n                }\n            }\n        }\n    }\n\n    typeArr.push(itemType);\n\n    return typeArr;\n}\n\n// content area keyboard event\nfunction itemKeyboardEvent(e, _0 = typeCheckThrow(e, \"event\")) {\n    let $item = findParentByClass(e.target, \"djs-item\");\n    let $editableItem = findContenteditable(e.target);\n    let code = e.keyCode;\n\n    setSelection();\n\n    switch (code) {\n        case 13:\n            contentEnterKeyEvent($item, $editableItem, e.shiftKey, e);\n            break;\n        case 9:\n            contentTabKeyEvent($item, $editableItem, e.shiftKey, e);\n            break;\n        case 8:\n            contentBackspaceKeyEvent($item, $editableItem, e);\n            break;\n    }\n}\n\nfunction wrappingNode(type, value, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(value, \"string\")) {\n    if (condition.baseOffset > condition.focusOffset) {\n        let baseOffset = condition.baseOffset;\n        let focusOffset = condition.focusOffset;\n\n        condition.baseOffset = focusOffset;\n        condition.focusOffset = baseOffset;\n    }\n\n    let $target = condition.baseNode;\n    let $editableItem = findContenteditable($target);\n    let childNodes = $editableItem.childNodes;\n    let text = $target.textContent;\n    let beforeText = text.substring(0, condition.baseOffset);\n    let middleText = text.substring(condition.baseOffset, condition.focusOffset);\n    let afterText = text.substring(condition.focusOffset, text.length);\n    let childHtml = beforeText;\n    let targetIndex = -1;\n    let html = \"\";\n\n    childHtml += getWrappingNode(type, value, middleText);\n    childHtml += afterText;\n\n    childNodes.forEach((node, index) => {\n        if (node == $target) {\n            targetIndex = index;\n        }\n    });\n\n    childNodes.forEach((node, index) => {\n        if (index == targetIndex) {\n            html += childHtml;\n        } else {\n            let name = node.constructor.name;\n\n            if (name == \"Text\") {\n                html += node.textContent;\n            } else {\n                html += node.outerHTML;\n            }\n        }\n    });\n\n    $editableItem.innerHTML = html;\n\n    if ($editableItem.childNodes[targetIndex + 1] == undefined) {\n        setCursor($editableItem.childNodes[0], 1);\n    } else {\n        setCursor($editableItem.childNodes[targetIndex + 1], 1);\n    }\n}\n\nfunction brokenNode(type, value, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(value, \"string\")) {\n    if (condition.baseOffset > condition.focusOffset) {\n        let baseOffset = condition.baseOffset;\n        let focusOffset = condition.focusOffset;\n\n        condition.baseOffset = focusOffset;\n        condition.focusOffset = baseOffset;\n    }\n\n    let $target = condition.baseNode;\n    let text = $target.textContent;\n    let beforeText = text.substring(0, condition.baseOffset);\n    let middleText = text.substring(condition.baseOffset, condition.focusOffset);\n    let afterText = text.substring(condition.focusOffset, text.length);\n    let $parentNode = $target.parentNode;\n    let html = \"\";\n    let styleValue = getTextItemOption($parentNode);\n\n    if ((text.length == condition.focusOffset && condition.baseOffset == 0) || value == styleValue[type]) {\n        let style = {};\n\n        style[type] = value;\n\n        setTextItemOption($parentNode, style);\n    } else {\n        html += `<span>${beforeText}</span>`;\n        html += getWrappingNode(type, value, middleText);\n        html += `<span>${afterText}</span>`;\n\n        $parentNode.insertAdjacentHTML(\"afterend\", html);\n        setTextItemOption($parentNode.nextElementSibling, styleValue);\n        setTextItemOption($parentNode.nextElementSibling.nextElementSibling.nextElementSibling, styleValue);\n        setCursor($parentNode.nextElementSibling.nextElementSibling, 1);\n        $parentNode.remove();\n    }\n    itemStructureValidation();\n}\n\nfunction margeNode(type, value, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(value, \"string\")) {\n    let $editableItem = findContenteditable(condition.baseNode);\n    let $childNode = $editableItem.childNodes;\n    let baseNode = condition.baseNode;\n    let focusNode = condition.focusNode;\n    let middleText = \"\";\n    let html = \"\";\n    let baseIndex, focusIndex, baseText, focusText;\n\n    if (baseNode.parentNode != $editableItem) {\n        baseNode = baseNode.parentNode;\n    }\n\n    if (focusNode.parentNode != $editableItem) {\n        focusNode = focusNode.parentNode;\n    }\n\n    $childNode.forEach(($child, index) => {\n        if ($child == baseNode) {\n            baseIndex = index;\n        } else if ($child == focusNode) {\n            focusIndex = index;\n        }\n    });\n\n    if (baseIndex > focusIndex) {\n        let beforBaseIndex = baseIndex;\n        let beforFocusIndex = focusIndex;\n        let beforFocusNode = focusNode;\n        let beforBaseNode = baseNode;\n\n        baseIndex = beforFocusIndex;\n        focusIndex = beforBaseIndex;\n        baseNode = beforFocusNode;\n        focusNode = beforBaseNode;\n    }\n\n    baseText = baseNode.textContent;\n    focusText = focusNode.textContent;\n\n    middleText += baseText.substring(condition.baseOffset, baseText.length);\n    $childNode.forEach(($child, index) => {\n        if (index > baseIndex && index < focusIndex) {\n            middleText += $child.textContent;\n        }\n    });\n    middleText += focusText.substring(0, condition.focusOffset);\n\n    $childNode.forEach(($child, index) => {\n        if (index < baseIndex) {\n            let name = $child.constructor.name;\n\n            if (name == \"Text\") {\n                html += $child.textContent;\n            } else {\n                html += $child.outerHTML;\n            }\n        }\n    });\n\n    if (baseNode.constructor.name == \"Text\") {\n        html += baseText.substring(0, condition.baseOffset);\n    } else {\n        baseNode.textContent = baseText.substring(0, condition.baseOffset);\n        html += baseNode.outerHTML;\n    }\n\n    html += getWrappingNode(type, value, middleText);\n\n    if (focusNode.constructor.name == \"Text\") {\n        html += focusText.substring(condition.focusOffset, focusText.length);\n    } else {\n        focusNode.textContent = focusText.substring(condition.focusOffset, focusText.length);\n        html += focusNode.outerHTML;\n    }\n\n    $childNode.forEach(($child, index) => {\n        if (index > focusIndex) {\n            let name = $child.constructor.name;\n\n            if (name == \"Text\") {\n                html += $child.textContent;\n            } else {\n                html += $child.outerHTML;\n            }\n        }\n    });\n\n    $editableItem.innerHTML = html;\n    if ($editableItem.childNodes[baseIndex + 1] == undefined) {\n        setCursor($editableItem.childNodes[0], 1);\n    } else {\n        setCursor($editableItem.childNodes[baseIndex + 1], 1);\n    }\n}\n\nfunction getWrappingNode(type, value, text, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(value, \"string\"), _2 = typeCheckThrow(text, \"string\")) {\n    let html;\n\n    switch (type) {\n        case \"fontSize\":\n            html = `<span data-font-size=\"${value}\">${text}</span>`;\n            break;\n        case \"color\":\n            html = `<span data-color=\"${value}\">${text}</span>`;\n            break;\n        case \"bold\":\n            html = `<b>${text}</b>`;\n            break;\n        case \"italic\":\n            html = `<i>${text}</i>`;\n            break;\n        case \"underline\":\n            html = `<u>${text}</u>`;\n            break;\n        case \"strikethrough\":\n            html = `<del>${text}</del>`;\n            break;\n        case \"wordblock\":\n            html = `<code>${text}</code>`;\n            break;\n        case \"link\":\n            html = `<a href=\"${value}\" rel=\"nofollow\">${text}</a>`;\n            break;\n    }\n\n    return html;\n}\n\nfunction nodeEffect(type, value = \"true\", _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(value, \"string\")) {\n    if (condition.baseNode == condition.focusNode) {\n        let $editable = findContenteditable(condition.baseNode);\n        let $parentNode = condition.baseNode.parentNode;\n\n        if ($editable == $parentNode) {\n            if ((condition.baseOffset == 0 && $parentNode.textContent.length == condition.focusOffset) || (condition.focusOffset == 0 && $parentNode.textContent.length == condition.baseOffset)) {\n                $parentNode.dataset[type] = value;\n            } else {\n                wrappingNode(type, value);\n            }\n        } else {\n            let $parentParentNode = $parentNode.parentNode;\n\n            if ($editable == $parentParentNode) {\n                brokenNode(type, value);\n            } else {\n                itemStructureValidation();\n                alert(message.wrongItemStructure);\n            }\n        }\n    } else {\n        margeNode(type, value);\n    }\n}\n\nfunction removeNodeEffect(type, tagName, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(tagName, \"string\")) {\n    let $editable = findContenteditable(condition.baseNode);\n    let $parentNode = condition.baseNode.parentNode;\n\n    if ($editable == $parentNode) {\n        $editable.dataset[type] = \"\";\n    } else {\n        textStylingNode(type, tagName, true);\n    }\n}\n\nfunction textStylingNode(type, tagName, isAct, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(tagName, \"string\"), _2 = typeCheckThrow(isAct, \"boolean\")) {\n    let constructorName = condition.baseNode.constructor.name;\n    let $target;\n\n    if (constructorName == \"Text\") {\n        $target = condition.baseNode.parentNode;\n    } else {\n        $target = condition.baseNode;\n    }\n\n    let name = $target.tagName;\n\n    if (name == tagName) {\n        let hasData = Object.keys($target.dataset) == 0 ? false : true;\n\n        if (hasData == true) {\n            let option = getTextItemOption($target);\n            option[type] = \"\";\n\n            $target.insertAdjacentHTML(\"afterend\", `<span>${$target.textContent}</span>`);\n            setTextItemOption($target.nextElementSibling, option);\n            $target.nextElementSibling.focus();\n            $target.remove();\n        } else {\n            $target.outerHTML = $target.textContent;\n            $target.focus();\n        }\n    } else {\n        if (isAct == true) {\n            $target.removeAttribute(`data-${type}`);\n        } else {\n            $target.setAttribute(`data-${type}`, \"true\");\n        }\n\n        $target.focus();\n    }\n}\n\nfunction changeTableCell(type, _0 = typeCheckThrow(type, \"string\")) {\n    let $editableItem = findContenteditable(condition.baseNode);\n    let html = $editableItem.innerHTML;\n\n    $editableItem.insertAdjacentHTML(\"afterend\", `<${type} contenteditable=\"true\">${html}</${type}>`);\n    setCursor($editableItem.nextElementSibling, 0);\n    condition.activeElement = $editableItem.nextElementSibling;\n    $editableItem.remove();\n    openOptionPop();\n}\n\nfunction itemMove(type, _0 = typeCheckThrow(type, \"string\")) {\n    let $item = findParentByClass(condition.baseNode, \"djs-item\");\n    let $target, html;\n\n    if ($item != null) {\n        if (type == \"up\") {\n            $target = $item.previousElementSibling;\n        } else if (type == \"down\") {\n            $target = $item.nextElementSibling;\n        }\n\n        if ($target != null) {\n            html = $target.outerHTML;\n\n            if (type == \"up\") {\n                $item.insertAdjacentHTML(\"afterend\", html);\n            } else if (type == \"down\") {\n                $item.insertAdjacentHTML(\"beforebegin\", html);\n            }\n\n            $target.remove();\n        }\n\n        openOptionPop();\n        $item.focus();\n    } else {\n        alert(message.missingSelect);\n    }\n}\n\nfunction itemStructureValidation() {\n    let wrongTagList = [\"font\", \"center\", \"div\"];\n    let $itemList = getChild(condition.areaContent, `[contenteditable=\"true\"]`);\n\n    $itemList.forEach(($item) => {\n        let itemType = findParentByClass($item, \"djs-item\").dataset[\"type\"];\n        let $nodeList = $item.childNodes;\n\n        if (itemType != \"codeblock\") {\n            $nodeList.forEach(($node) => {\n                let isTag = $node.constructor.name == \"Text\" ? false : true;\n\n                if (isTag == true) {\n                    let $childNode = $node.childNodes;\n                    let tagName = $node.tagName.toLowerCase();\n                    let hasData = Object.keys($node.dataset) == 0 ? false : true;\n                    let hasText = $node.textContent == \"\" ? false : true;\n\n                    $node.removeAttribute(\"style\");\n\n                    if (hasText == false) {\n                        if (tagName != \"br\") {\n                            $node.remove();\n                        }\n                    } else {\n                        if (hasData == false) {\n                            if (wrongTagList.indexOf(tagName) > -1) {\n                                $node.outerHTML = $node.textContent;\n                            } else if (tagName == \"span\") {\n                                $node.outerHTML = $node.textContent;\n                            }\n                        } else {\n                            $childNode.forEach(($child) => {\n                                let type = $child.constructor.name;\n\n                                if (type != \"Text\") {\n                                    $child.outerHTML = $child.innerText;\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    });\n\n    if($itemList.length == 0){\n        condition.areaContent.insertAdjacentHTML(\"beforeend\", getTextBlockHTML());\n    }\n}\n\n// export function codeBlockHighlight(e, _0 = typeCheckThrow(e, Event)) {\n//     let $item = findParentByClass(e.target, \"djs-item\");\n//     let $editableItem = findContenteditable(e.target);\n//     let itemType = $item.dataset[\"type\"];\n\n//     if (itemType == \"codeblock\") {\n//         console.log(condition.baseNode);\n//         hljs.highlightBlock($editableItem);\n//         setCursor($editableItem, condition.baseOffset);\n//     }\n// }\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/item.js?");

/***/ }),

/***/ "./common/js/module/keyboard.js":
/*!**************************************!*\
  !*** ./common/js/module/keyboard.js ***!
  \**************************************/
/*! exports provided: contentEnterKeyEvent, contentTabKeyEvent, contentBackspaceKeyEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentEnterKeyEvent\", function() { return contentEnterKeyEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentTabKeyEvent\", function() { return contentTabKeyEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentBackspaceKeyEvent\", function() { return contentBackspaceKeyEvent; });\nconst { typeCheckThrow, classControl } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { isTextSelect, setCursor } = __webpack_require__(/*! ./cursor */ \"./common/js/module/cursor.js\");\nconst { getChild, findContenteditable } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { getTextBlockHTML, getListChildHTML, addBlockToContent } = __webpack_require__(/*! ./layout */ \"./common/js/module/layout.js\");\n\nfunction contentEnterKeyEvent($item, $editableItem, shiftKey, e, _0 = typeCheckThrow($item, \"node\"), _1 = typeCheckThrow($editableItem, \"node\"), _2 = typeCheckThrow(shiftKey, \"boolean\")) {\n    if (shiftKey == false && condition.enterCount == 0) {\n        e.preventDefault();\n\n        let type = $item.dataset[\"type\"];\n\n        condition.enterCount += 1;\n\n        if (isTextSelect() == true) {\n            // to-do : select enter\n        } else {\n            let childNodes = $editableItem.childNodes;\n            let childNodesCount = childNodes.length;\n\n            setCursor(condition.baseNode, condition.baseOffset);\n\n            setTimeout(() => {\n                if (type == \"text\") {\n                    if (childNodesCount > 0) {\n                        let lastChildNode = childNodes[childNodesCount - 1];\n                        let lastChildNodeText = lastChildNode.textContent.length;\n\n                        if (condition.baseNode == lastChildNode && condition.baseOffset == lastChildNodeText) {\n                            $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML());\n                            setCursor($item.nextElementSibling, 0);\n                        } else if (condition.baseNode == childNodes[0] && condition.baseOffset == 0) {\n                            $item.insertAdjacentHTML(\"beforebegin\", getTextBlockHTML());\n                        } else {\n                            let value = splitEditableNodeByNoSelect(childNodes, childNodesCount);\n\n                            $item.childNodes[value.childNumber].textContent = value.beforeText;\n                            $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML(value.afterHTML));\n                            $item.nextElementSibling.childNodes[0].textContent = value.afterText;\n                            setCursor($item.nextElementSibling.childNodes[0], 0);\n                        }\n                    } else {\n                        $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML());\n                        setCursor($item.nextElementSibling, 0);\n                    }\n                } else if (type == \"ol\" || type == \"ul\") {\n                    if (childNodesCount > 0) {\n                        let lastChildNode = childNodes[childNodesCount - 1];\n                        let lastChildNodeText = lastChildNode.textContent.length;\n\n                        if (condition.baseNode == lastChildNode && condition.baseOffset == lastChildNodeText) {\n                            $editableItem.insertAdjacentHTML(\"afterend\", getListChildHTML());\n                            setCursor($editableItem.nextElementSibling, 0);\n                        } else if (condition.baseNode == findContenteditable(childNodes[0]) && condition.baseOffset == 0) {\n                            $editableItem.insertAdjacentHTML(\"beforebegin\", getListChildHTML());\n                        } else {\n                            let value = splitEditableNodeByNoSelect(childNodes, childNodesCount);\n\n                            $editableItem.innerHTML = value.beforeHTML;\n                            $editableItem.childNodes[value.childNumber].textContent = value.beforeText;\n                            $editableItem.insertAdjacentHTML(\"afterend\", getListChildHTML(value.afterHTML));\n                            $editableItem.nextElementSibling.childNodes[0].textContent = value.afterText;\n                            setCursor($editableItem.nextElementSibling.childNodes[0], 0);\n                        }\n                    } else {\n                        let $liList = getChild($item, `[contenteditable=\"true\"]`);\n                        let liCount = $liList.length;\n\n                        if (liCount > 1) {\n                            let isLastChild = false;\n\n                            $liList.forEach(($row, index) => {\n                                if ($row == $editableItem && index == liCount - 1) {\n                                    isLastChild = true;\n                                }\n                            });\n\n                            if (isLastChild == true) {\n                                $editableItem.remove();\n                                addBlockToContent(getTextBlockHTML());\n                            } else {\n                                $editableItem.insertAdjacentHTML(\"afterend\", getListChildHTML());\n                                setCursor($editableItem.nextElementSibling, 0);\n                            }\n                        } else {\n                            $editableItem.insertAdjacentHTML(\"afterend\", getListChildHTML());\n                            setCursor($editableItem.nextElementSibling, 0);\n                        }\n                    }\n                } else if (type == \"table\") {\n                    let editableItemName = $editableItem.constructor.name;\n\n                    if (editableItemName == \"HTMLTableCaptionElement\") {\n                        let $target = getChild($item, `*[data-x=\"0\"][data-y=\"0\"]`, false);\n                        let hasChildNode = $target.childNodes.length > 0 ? true : false;\n\n                        if (hasChildNode == true) {\n                            setCursor($target.childNodes[0], 0);\n                        } else {\n                            setCursor($target, 0);\n                        }\n                    } else {\n                        let x = parseInt($editableItem.dataset[\"x\"]);\n                        let y = parseInt($editableItem.dataset[\"y\"]) + 1;\n                        let $target = getChild($item, `*[data-x=\"${x}\"][data-y=\"${y}\"]`, false);\n\n                        if ($target != null) {\n                            let hasChildNode = $target.childNodes.length > 0 ? true : false;\n\n                            if (hasChildNode == true) {\n                                setCursor($target.childNodes[0], 0);\n                            } else {\n                                setCursor($target, 0);\n                            }\n                        } else {\n                            $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML());\n                            setCursor($item.nextElementSibling, 0);\n                        }\n                    }\n                } else {\n                    $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML());\n                    setCursor($item.nextElementSibling, 0);\n                }\n            }, 50);\n        }\n\n        setTimeout(() => {\n            condition.enterCount = 0;\n        }, 150);\n    } else if (condition.enterCount != 0) {\n        e.preventDefault();\n    }\n}\n\nfunction contentTabKeyEvent($item, $editableItem, shiftKey, e, _0 = typeCheckThrow($item, \"node\"), _1 = typeCheckThrow($editableItem, \"node\"), _2 = typeCheckThrow(shiftKey, \"boolean\")) {\n    e.preventDefault();\n    setCursor(condition.baseNode, condition.baseOffset);\n\n    setTimeout(() => {\n        let type = $item.dataset[\"type\"];\n        let depth = parseInt($editableItem.dataset[\"depth\"] == undefined ? 0 : $editableItem.dataset[\"depth\"]);\n\n        if (shiftKey == true) {\n            if (depth > 0) {\n                depth -= 1;\n            }\n        } else {\n            if (depth < 3) {\n                depth += 1;\n            }\n        }\n\n        if (type == \"text\" || type == \"ol\" || type == \"ul\") {\n            if (depth == 0) {\n                $editableItem.removeAttribute(\"data-depth\");\n            } else {\n                $editableItem.dataset[\"depth\"] = depth;\n            }\n        } else if (type == \"table\") {\n            let editableItemName = $editableItem.constructor.name;\n\n            if (editableItemName == \"HTMLTableCellElement\") {\n                let x = parseInt($editableItem.dataset[\"x\"]);\n                let y = parseInt($editableItem.dataset[\"y\"]);\n\n                if (shiftKey == true) {\n                    x -= 1;\n                } else {\n                    x += 1;\n                }\n\n                let $target = getChild($item, `*[data-x=\"${x}\"][data-y=\"${y}\"]`, false);\n\n                if ($target != null) {\n                    let hasChildNode = $target.childNodes.length > 0 ? true : false;\n\n                    if (hasChildNode == true) {\n                        setCursor($target.childNodes[0], 0);\n                    } else {\n                        setCursor($target, 0);\n                    }\n                }\n            }\n        }\n    }, 150);\n}\n\nfunction contentBackspaceKeyEvent($item, $editableItem, e, _0 = typeCheckThrow($item, \"node\"), _1 = typeCheckThrow($editableItem, \"node\")) {\n    let type = $item.dataset[\"type\"];\n    let itemCount = condition.areaContent.childElementCount;\n    let hasPrevEl = $item.previousElementSibling == null ? false : true;\n    let hasText = $editableItem.textContent.length > 0 ? true : false;\n    let $preEl = $item.previousElementSibling;\n\n    if (isTextSelect() == true) {\n        // to-do : select backspace\n    } else {\n        if (condition.baseOffset == 0) {\n            e.preventDefault();\n\n            if (hasPrevEl == true) {\n                let preElType = $preEl.dataset[\"type\"];\n                let preElHasText = $preEl.textContent.length > 0 ? true : false;\n                let position = preElHasText == true ? 1 : 0;\n\n                if (type == \"text\") {\n                    if (hasText == true) {\n                        if (preElType == \"text\") {\n                            if (preElHasText == true) {\n                                let $preChilds = $preEl.childNodes;\n                                let preChildCount = $preChilds.length;\n                                let text = $preEl.innerHTML + $item.innerHTML;\n                                position = $preChilds[preChildCount - 1].textContent.length;\n\n                                $preEl.innerHTML = text;\n                                $item.remove();\n                                setCursor($preEl.childNodes[preChildCount - 1], position);\n                            } else {\n                                $preEl.remove();\n                            }\n                        } else {\n                            $preEl.remove();\n                        }\n                    } else {\n                        $item.remove();\n\n                        if (preElType == \"text\") {\n                            let $preElChild = $preEl.childNodes;\n                            let preElChildLength = $preElChild.length;\n                            let $target;\n\n                            if (preElChildLength > 0) {\n                                // 이전 아이템에 자식이 있을경우\n                                $target = $preElChild[preElChildLength - 1];\n                                position = $target.length;\n                            } else {\n                                $target = $preEl;\n                                position = 0;\n                            }\n\n                            setCursor($target, position);\n                        } else {\n                            let $preEditableChild = getChild($preEl, `*[contenteditable=\"true\"]`);\n                            let count = $preEditableChild.length;\n                            let preEditableHasText = $preEditableChild[count - 1].textContent.length > 0 ? true : false;\n\n                            position = preEditableHasText == true ? 1 : 0;\n\n                            setCursor($preEditableChild[count - 1], position);\n                        }\n                    }\n                } else if (type == \"ol\" || type == \"ul\") {\n                    let text = $editableItem.innerHTML;\n                    let childCount = getChild($item, `*[contenteditable=\"true\"]`).length;\n                    let $preEditable = $editableItem.previousElementSibling;\n                    let hasPreEditable = $preEditable == null ? false : true;\n\n                    if (childCount > 1) {\n                        // 리스트가 여러개일 경우\n                        if (hasPreEditable == true) {\n                            // 이전 에디팅 요소가 있을경우\n                            let $preChilds = $preEditable.childNodes;\n                            let preChildCount = $preChilds.length;\n                            let $target;\n\n                            if (hasText == false) {\n                                if (preChildCount > 0) {\n                                    $target = $preChilds[preChildCount - 1];\n                                    position = $target.length;\n                                } else {\n                                    $target = $preEditable;\n                                    position = 0;\n                                }\n                            } else {\n                                if (preChildCount > 0) {\n                                    let html = $preEditable.innerHTML + text;\n                                    position = $preChilds[preChildCount - 1].textContent.length;\n                                    $preEditable.innerHTML = html;\n                                    $target = $preEditable.childNodes[preChildCount - 1];\n                                } else {\n                                    $preEditable.innerHTML = text;\n                                    $target = $preEditable;\n                                    position = 0;\n                                }\n                            }\n\n                            $editableItem.remove();\n                            setCursor($target, position);\n                            condition.activeItem = $preEditable;\n                            condition.baseNode = $target;\n                        } else {\n                            $item.insertAdjacentHTML(\"beforebegin\", getTextBlockHTML(text));\n                            setCursor($item.previousElementSibling, 0);\n                            $item.remove();\n                        }\n                    } else {\n                        $item.insertAdjacentHTML(\"afterend\", getTextBlockHTML(text));\n                        setCursor($item.nextElementSibling, 0);\n                        $item.remove();\n                    }\n                }\n            } else {\n                if (hasText == false) {\n                    $item.remove();\n                    classControl(condition.popOption, \"remove\", \"--act\");\n                    condition.activeItem = condition.wrap;\n\n                    if (itemCount == 1) {\n                        condition.areaContent.insertAdjacentHTML(\"beforeend\", getTextBlockHTML());\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction splitEditableNodeByNoSelect(childNodes, childNodesCount, _0 = typeCheckThrow(childNodes, NodeList), _1 = typeCheckThrow(childNodesCount, \"number\")) {\n    let childNumber = -1;\n    let beforeHTML = \"\";\n    let afterHTML = \"\";\n    let $targetChild, targetChldText, targetChldConstructorName;\n\n    for (let i = 0; i < childNodesCount; i += 1) {\n        if (childNodes[i] == condition.baseNode) {\n            childNumber = i;\n            break;\n        }\n    }\n\n    if (childNumber < 0) {\n        for (let j = 0; j < childNodesCount; j += 1) {\n            if (childNodes[j] == condition.baseNode.parentNode) {\n                childNumber = j;\n                break;\n            }\n        }\n    }\n\n    $targetChild = childNodes[childNumber];\n    targetChldConstructorName = $targetChild.constructor.name;\n    targetChldText = $targetChild.textContent;\n\n    if (targetChldConstructorName == \"Text\") {\n        afterHTML += $targetChild.textContent;\n    } else {\n        afterHTML += $targetChild.outerHTML;\n    }\n\n    for (let k = 0; k < childNodesCount; k += 1) {\n        let constructorName = childNodes[k].constructor.name;\n\n        if (k > childNumber) {\n            if (constructorName == \"Text\") {\n                afterHTML += childNodes[k].textContent;\n            } else {\n                afterHTML += childNodes[k].outerHTML;\n            }\n        } else if (k < childNumber) {\n            if (constructorName == \"Text\") {\n                beforeHTML += childNodes[k].textContent;\n            } else {\n                beforeHTML += childNodes[k].outerHTML;\n            }\n        }\n    }\n\n    if (targetChldConstructorName == \"Text\") {\n        beforeHTML += $targetChild.textContent;\n    } else {\n        beforeHTML += $targetChild.outerHTML;\n    }\n\n    return {\n        beforeHTML: beforeHTML,\n        afterHTML: afterHTML,\n        beforeText: targetChldText.substring(0, condition.baseOffset),\n        afterText: targetChldText.substring(condition.baseOffset, targetChldText.length),\n        childNumber: childNumber,\n    };\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/keyboard.js?");

/***/ }),

/***/ "./common/js/module/layout.js":
/*!************************************!*\
  !*** ./common/js/module/layout.js ***!
  \************************************/
/*! exports provided: makeView, scrollButtonHTML, getDefaultBlockHTML, getTextBlockHTML, getImageBlockHTML, getEmoticonBlockHTML, getListChildHTML, getYoutubeBlock, getCodepenBlock, getLinkboxBlock, setEmoticonList, setMediaList, addBlockToContent, getContentData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeView\", function() { return makeView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scrollButtonHTML\", function() { return scrollButtonHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDefaultBlockHTML\", function() { return getDefaultBlockHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTextBlockHTML\", function() { return getTextBlockHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getImageBlockHTML\", function() { return getImageBlockHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEmoticonBlockHTML\", function() { return getEmoticonBlockHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getListChildHTML\", function() { return getListChildHTML; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getYoutubeBlock\", function() { return getYoutubeBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCodepenBlock\", function() { return getCodepenBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLinkboxBlock\", function() { return getLinkboxBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEmoticonList\", function() { return setEmoticonList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setMediaList\", function() { return setMediaList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addBlockToContent\", function() { return addBlockToContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getContentData\", function() { return getContentData; });\nconst { typeCheckThrow, upperFirstChar, classControl } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getElement, getActiveElement, getChild } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { setCursor } = __webpack_require__(/*! ./cursor */ \"./common/js/module/cursor.js\");\nconst { htmlToJson } = __webpack_require__(/*! ./convertor */ \"./common/js/module/convertor.js\");\n\nfunction makeView() {\n    let view = \"\";\n\n    view += makeContentArea();\n\n    view += `<div class=\"editor-menu-block\">`;\n    view += makeBlockMenu(condition.defaultMenu);\n    view += `</div>`;\n\n    view += `<div class=\"editor-menu-bottom\">`;\n    view += makeBottomMenu();\n    if (condition.multiLang == true) {\n        view += makeLanguagePop();\n    }\n    view += makeFolderPop();\n    view += `</div>`;\n\n    view += makeLinkboxPop();\n    view += makeOptionPop();\n    view += makeEmoticonPop();\n\n    condition.wrap.insertAdjacentHTML(\"beforeend\", view);\n\n    if (condition.uploadURL !== \"\") {\n        document.body.insertAdjacentHTML(\"beforeend\", makeUploadForm());\n    }\n}\n\nfunction makeContentArea() {\n    return `<div class=\"editor-content djs-content\"><p class=\"editor-item djs-item\" contenteditable=\"true\" data-type=\"text\"></p></div>`;\n}\n\nfunction makeBlockMenu(data) {\n    let arr = Object.entries(data);\n    let html = `<div class=\"editor-scroll-col editor-clearfix\" data-count=\"${arr.length}\">`;\n\n    for (const [key, value] of arr) {\n        if (value.type === \"block\") {\n            html += `\n                <button type=\"button\" class=\"editor-btn djs-add-block\" title=\"${value.text}\" data-value=\"${key}\" data-type=\"${value.type}\">\n                    <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                        <use class=\"path\" xlink:href=\"${value.icon}\" href=\"${value.icon}\"></use>\n                    </svg>\n                    ${value.text}\n                </button>\n            `;\n        } else if (value.type === \"pop\") {\n            html += `\n                <button type=\"button\" class=\"editor-btn djs-add-block djs-btn-ignore\" title=\"${value.text}\" data-value=\"${key}\" data-type=\"${value.type}\">\n                    <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                        <use class=\"path\" xlink:href=\"${value.icon}\" href=\"${value.icon}\"></use>\n                    </svg>\n                    ${value.text}\n                </button>\n            `;\n        } else if (value.type === \"file\") {\n            html += `\n                <button type=\"button\" class=\"editor-btn djs-add-block\" title=\"${value.text}\" data-value=\"${key}\" data-type=\"${value.type}\">\n                    <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                        <use class=\"path\" xlink:href=\"${value.icon}\" href=\"${value.icon}\"></use>\n                    </svg>\n                    ${value.text}\n                </button>\n            `;\n        } else {\n            html += `\n                <button type=\"button\" class=\"editor-btn djs-add-block\" title=\"${value.text}\" data-value=\"${key}\" data-type=\"custom\">\n                    <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                        <use class=\"path\" xlink:href=\"${value.icon}\" href=\"${value.icon}\"></use>\n                    </svg>\n                    ${value.text}\n                </button>\n            `;\n        }\n    }\n\n    html += `</div>`;\n\n    return html;\n}\n\nfunction makeBottomMenu() {\n    let html = ``;\n\n    if (condition.uploadURL !== \"\") {\n        html += `\n            <button type=\"button\" class=\"editor-btn djs-toggle-target djs-btn-ignore\" data-target=\".editor-pop-folder\">\n                <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-folder\" href=\"#icon-folder\"></use>\n                </svg>\n                Media\n            </button>\n        `;\n    }\n\n    if (condition.multiLang == true) {\n        html += `\n            <button type=\"button\" class=\"editor-btn djs-toggle-target djs-btn-ignore\" data-target=\".editor-pop-lang\">\n                <svg viewbox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-lang\" href=\"#icon-lang\"></use>\n                </svg>\n                Change language\n            </button>\n        `;\n    }\n\n    html += `\n        <button type=\"button\" class=\"editor-btn editor-switch-device djs-switch-device\">\n            <svg class=\"editor-icon\" viewbox=\"0 0 64 64\">\n                <use class=\"path editor-pc\" xlink:href=\"#icon-pc\" href=\"#icon-pc\"></use>\n                <use class=\"path editor-mobile\" xlink:href=\"#icon_mobile\" href=\"#icon-mobile\"></use>\n            </svg>\n            Change view\n        </button>\n    `;\n\n    return html;\n}\n\nfunction makeLanguagePop() {\n    let html = `<div class=\"editor-pop-lang djs-trigger\" data-length=\"${condition.langCategory.length}\">`;\n\n    condition.langCategory.forEach((lang) => {\n        if (lang == condition.lang) {\n            html += `<button type=\"button\" class=\"editor-btn-lang djs-change-lang --act\" data-value=\"${lang}\">${lang.toUpperCase()}</button>`;\n        } else {\n            html += `<button type=\"button\" class=\"editor-btn-lang djs-change-lang\" data-value=\"${lang}\">${lang.toUpperCase()}</button>`;\n        }\n    });\n\n    html += `</div>`;\n\n    return html;\n}\n\nfunction makeEmoticonPop() {\n    return `\n        <div class=\"editor-list-pop editor-pop-emoticon editor-scroll djs-emoticon-pop djs-trigger djs-scroll\">\n            <div class=\"editor-scroll-content djs-scroll-content\">\n                <div class=\"editor-list-emoticon djs-list-emoticon editor-clearfix\"></div>\n            </div>\n        </div>\n    `;\n}\n\nfunction makeFolderPop() {\n    return `\n        <div class=\"editor-list-pop editor-pop-folder editor-scroll djs-folder-pop djs-trigger djs-scroll\">\n            <div class=\"editor-scroll-content djs-scroll-content\">\n                <ul class=\"editor-list-media djs-list-media editor-clearfix\"></ul>\n            </div>\n        </div>\n    `;\n}\n\nfunction makeLinkboxPop() {\n    return `\n        <div class=\"editor-pop-linkbox djs-linkbox-pop editor-clearfix djs-trigger\" data-type=\"new\">\n            <input type=\"url\" class=\"editor-input djs-input --new\" placeholder=\"https://dico.me\">\n            <a href=\"\" class=\"editor-link --del djs-link\"></a>\n            <button type=\"button\" class=\"editor-btn djs-btn\" data-value=\"\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path --del\" xlink:href=\"#icon-delete-link\" href=\"#icon-delete-link\"></use>\n                    <use class=\"path --new\" xlink:href=\"#icon-btn-accept\" href=\"#icon-btn-accept\"></use>\n                </svg>\n            </button>\n        </div>\n    `;\n}\n\nfunction makeUploadForm() {\n    let html = `<form enctype=\"multipart/form-data\" method=\"post\" class=\"editor-uploader djs-uploader\">`;\n\n    if (condition.csrfData.value != \"\") {\n        html += `<input type=\"hidden\" name=\"${condition.csrfData.name}\" value=\"${condition.csrfData.value}\">`;\n    }\n    if (condition.multiUpload == true) {\n        html += `<input type=\"file\" name=\"file\" multiple class=\"djs-file\">`;\n    } else {\n        html += `<input type=\"file\" name=\"file\" class=\"djs-file\">`;\n    }\n    html += `</form>`;\n\n    return html;\n}\n\nfunction scrollButtonHTML() {\n    return `<button type=\"button\" class=\"scroll-bar djs-scroll-bar\" style=\"transform:translateY(0)\"></button>`;\n}\n\nfunction getDefaultBlockHTML(type, _0 = typeCheckThrow(type, \"string\")) {\n    let html;\n\n    switch (type) {\n        case \"textBlock\":\n            html = getTextBlockHTML();\n            break;\n        case \"ulBlock\":\n            html = getUlBlockHTML();\n            break;\n        case \"olBlock\":\n            html = getOlBlockHTML();\n            break;\n        case \"quotaionBlock\":\n            html = getQuotaionBlock();\n            break;\n        case \"tableBlock\":\n            html = getTableBlock();\n            break;\n        case \"codeBlock\":\n            html = getCodeBlock();\n            break;\n        default:\n            html = \"\";\n    }\n\n    return html;\n}\n\nfunction getTextBlockHTML(content = \"\", _0 = typeCheckThrow(content, \"string\")) {\n    return `<p class=\"editor-item djs-item --djs-selected\" contenteditable=\"true\" data-type=\"text\">${content}</p>`;\n}\n\nfunction getImageBlockHTML(attr, width = 700, _0 = typeCheckThrow(attr, \"object\"), _1 = typeCheckThrow(width, \"number\")) {\n    let html = `\n        <div class=\"editor-item djs-item --djs-selected\" data-type=\"image\" data-webp=\"${attr.hasWebp}\">\n            <div class=\"editor-size djs-size\" data-width=\"${width}\">\n    `;\n\n    if (condition.useWebp == true) {\n        html += `<picture>`;\n\n        if (attr.hasWebp == true) {\n            html += `<source srcset=\"${attr.src}.webp\" type=\"image/webp\">`;\n        }\n\n        html += `<img src=\"${attr.src}.${attr.defaultFormat}\" width=\"${attr.width}\" alt=\"${attr.alt}\" data-height=\"${attr.height}\" class=\"editor-img djs-img\" draggable=\"false\">`;\n        html += `</picture>`;\n    } else {\n        html += `<img src=\"${attr.src}.${attr.defaultFormat}\" width=\"${attr.width}\" alt=\"${attr.alt}\" data-height=\"${attr.height}\" class=\"editor-img djs-img\" draggable=\"false\">`;\n    }\n\n    html += `<button type=\"button\" class=\"editor-btn-resize --left djs-resize\" data-value=\"width\" data-position=\"left\">resize</button>`;\n    html += `<button type=\"button\" class=\"editor-btn-resize --right djs-resize\" data-value=\"width\" data-position=\"right\">resize</button>`;\n    html += `</div>`;\n    html += `<p class=\"editor-caption djs-caption\" contenteditable=\"true\" data-type=\"caption\">${attr.alt}</p>`;\n    html += `</div>`;\n\n    return html;\n}\n\nfunction getEmoticonBlockHTML(code, _0 = typeCheckThrow(code, \"string\")) {\n    return `<div class=\"editor-item djs-item --djs-selected\" data-type=\"emoticon\">${code}</div>`;\n}\n\nfunction getUlBlockHTML(child = [\"\"], _0 = typeCheckThrow(child, \"array\")) {\n    let html = `<ul class=\"editor-item djs-item --djs-selected\" data-type=\"ul\">`;\n\n    child.forEach((row) => {\n        html += `<li contenteditable=\"true\">${row}</li>`;\n    });\n\n    html += `</ul>`;\n\n    return html;\n}\n\nfunction getOlBlockHTML(child = [\"\"], _0 = typeCheckThrow(child, \"array\")) {\n    let html = `<ol class=\"editor-item djs-item --djs-selected\" data-style=\"number\" data-type=\"ol\">`;\n\n    child.forEach((row) => {\n        html += `<li contenteditable=\"true\">${row}</li>`;\n    });\n\n    html += `</ol>`;\n\n    return html;\n}\n\nfunction getListChildHTML(content = \"\", _0 = typeCheckThrow(content, \"string\")) {\n    return `<li contenteditable=\"true\">${content}</li>`;\n}\n\nfunction getQuotaionBlock() {\n    return `<blockquote class=\"editor-item djs-item --djs-selected\" data-type=\"quote\" data-style=\"default\"><p class=\"editor-text djs-text\" contenteditable=\"true\"></p><p class=\"editor-author djs-author\" contenteditable=\"true\"></p></blockquote>`;\n}\n\nfunction getTableBlock() {\n    return `\n        <div class=\"editor-item djs-item --djs-selected\" data-type=\"table\">\n            <div class=\"editor-scroll\">\n                <table class=\"editor-table\">\n                    <caption class=\"djs-caption\" contenteditable=\"true\"></caption>\n                    <colgroup>\n                        <col data-size=\"100\">\n                        <col data-size=\"100\">\n                        <col data-size=\"100\">\n                        <col data-size=\"100\">\n                    </colgroup>\n                    <tbody>\n                        <tr>\n                            <th contenteditable=\"true\" data-x=\"0\" data-y=\"0\"></th>\n                            <th contenteditable=\"true\" data-x=\"1\" data-y=\"0\"></th>\n                            <th contenteditable=\"true\" data-x=\"2\" data-y=\"0\"></th>\n                            <th contenteditable=\"true\" data-x=\"3\" data-y=\"0\"></th>\n                        </tr>\n                        <tr>\n                            <td contenteditable=\"true\" data-x=\"0\" data-y=\"1\"></td>\n                            <td contenteditable=\"true\" data-x=\"1\" data-y=\"1\"></td>\n                            <td contenteditable=\"true\" data-x=\"2\" data-y=\"1\"></td>\n                            <td contenteditable=\"true\" data-x=\"3\" data-y=\"1\"></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `;\n}\n\nfunction getCodeBlock() {\n    return `\n        <pre class=\"editor-item djs-item --djs-selected\" data-type=\"codeblock\" data-theme=\"default\" data-lang=\"text\"><code class=\"nohighlight editor-code djs-code\" contenteditable=\"true\"></code></pre>\n    `;\n}\n\nfunction getYoutubeBlock(code, _0 = typeCheckThrow(code, \"string\")) {\n    return `\n        <div class=\"editor-item djs-item --djs-selected\" data-type=\"youtube\" data-code=\"${code}\">\n            <iframe src=\"https://www.youtube.com/embed/${code}\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen class=\"editor-iframe djs-iframe\"></iframe>\n            <button type=\"button\" class=\"editor-edit\">edit</button>\n        </div>\n    `;\n}\n\nfunction getCodepenBlock(nickname, code, height = 300, _0 = typeCheckThrow(nickname, \"string\"), _1 = typeCheckThrow(code, \"string\"), _2 = typeCheckThrow(height, \"number\")) {\n    return `\n        <div class=\"editor-item djs-item --djs-selected\" data-type=\"codepen\">\n            <iframe height=\"${height}\" title=\"\" src=\"https://codepen.io/${nickname}/embed/${code}?height=${height}&theme-id=${condition.codepenTheme}&default-tab=result\" allowfullscreen class=\"editor-iframe djs-iframe\" data-code=\"${code}\" data-nickname=\"${nickname}\"></iframe>\n            <button type=\"button\" class=\"editor-btn-resize djs-resize\" data-value=\"height\">Resize height</button>\n            <button type=\"button\" class=\"editor-edit\">edit</button>\n        </div>\n    `;\n}\n\nfunction getLinkboxBlock(data, _0 = typeCheckThrow(data, \"object\")) {\n    return `\n        <div class=\"editor-item djs-item --djs-selected\" data-type=\"linkbox\">\n            <a href=\"${data.url}\" target=\"_blank\" rel=\"nofollow\" class=\"editor-linkbox editor-clearfix djs-linkbox\" draggable=\"false\">\n                <div class=\"editor-linkbox-img\">\n                    <img src=\"${data.img}\" alt=\"preview image\" class=\"editor-img djs-img\" draggable=\"false\">\n                </div>\n\n                <div class=\"editor-linkbox-text\">\n                    <p class=\"editor-title djs-title\">${data.title}</p>\n                    <p class=\"editor-description djs-description\">${data.description}</p>\n                    <p class=\"editor-domain djs-domain\">${data.domain}</p>\n                </div>\n            </a>\n        </div>\n    `;\n}\n\nfunction makeOptionPop() {\n    let html = `\n    <div class=\"editor-pop-option djs-option-pop\">\n        <div class=\"editor-scroll-wrap\">\n            <div class=\"editor-clearfix djs-scroll-depth\">`;\n\n    html += `\n            <div class=\"editor-col --act\" data-group=\"text,li,table,codeblock,word\">\n                <button type=\"button\" class=\"editor-select djs-fontsize djs-toggle-target djs-btn-ignore\" data-target=\".editor-list-fontsize\">\n                    <span class=\"editor-text djs-text\">16</span>\n\n                    <svg class=\"editor-icon\" viewbox=\"0 0 64 64\">\n                        <use class=\"path\" xlink:href=\"#icon-arrow-bottom\" href=\"#icon-arrow-bottom\"></use>\n                    </svg>\n                </button>\n\n                <div class=\"editor-list-fontsize editor-scroll djs-scroll djs-trigger\">\n                    <div class=\"editor-scroll-content djs-scroll-content\">\n    `;\n\n    condition.frontSize.forEach((size) => {\n        let text = Math.floor(condition.defaultFontSize * size);\n\n        html += `<button type=\"button\" class=\"editor-btn djs-change-fontsize\" data-value=\"${size}\">${text}</button>`;\n    });\n\n    html += `\n                    </div>\n                </div>\n            </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act\" data-group=\"text,li,table,word\">\n            <button type=\"button\" class=\"editor-color djs-color djs-toggle-target djs-btn-ignore\" data-target=\".editor-list-color\" data-value=\"#333\"></button>\n            <div class=\"editor-list-color djs-trigger\">\n    `;\n\n    condition.colorList.forEach((color) => {\n        html += `<button type=\"button\" class=\"editor-btn djs-change-color\" data-value=\"${color}\">${color}</button>`;\n    });\n\n    html += `\n            </div>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"text,li,table,image,sticker\">\n            <button type=\"button\" class=\"editor-btn djs-change-align\" data-value=\"left\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-align-left\" href=\"#icon-align-left\"></use>\n                </svg>\n\n                align left\n            </button>\n\n            <button type=\"button\" class=\"editor-btn djs-change-align\" data-value=\"center\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-align-center\" href=\"#icon-align-center\"></use>\n                </svg>\n\n                align center\n            </button>\n\n            <button type=\"button\" class=\"editor-btn djs-change-align\" data-value=\"right\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-align-right\" href=\"#icon-align-right\"></use>\n                </svg>\n\n                align right\n            </button>\n        </div>\n\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"text,li,table,word,link\">\n            <button type=\"button\" class=\"editor-btn djs-toggle-bold\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-bold\" href=\"#icon-bold\"></use>\n                </svg>\n\n                bold\n            </button>\n\n            <button type=\"button\" class=\"editor-btn djs-toggle-italic\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-italic\" href=\"#icon-italic\"></use>\n                </svg>\n\n                italic\n            </button>\n\n            <button type=\"button\" class=\"editor-btn djs-toggle-underline\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-underline\" href=\"#icon-underline\"></use>\n                </svg>\n\n                underline\n            </button>\n\n            <button type=\"button\" class=\"editor-btn djs-toggle-strikethrough\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-strikethrough\" href=\"#icon-strikethrough\"></use>\n                </svg>\n\n                strikethrough\n            </button>\n        </div>\n\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"td\">\n            <button type=\"button\" class=\"editor-btn djs-table-header\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-table-header\" href=\"#icon-table-header\"></use>\n                </svg>\n\n                change to table header\n            </button>\n        </div>\n\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"th\">\n            <button type=\"button\" class=\"editor-btn djs-table-body\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-table-body\" href=\"#icon-table-body\"></use>\n                </svg>\n\n                change to table body\n            </button>\n        </div>\n\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"word,link\">\n            <button type=\"button\" class=\"editor-btn djs-open-linkbox\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-link\" href=\"#icon-link\"></use>\n                </svg>\n\n                open linkbox pop\n            </button>\n        </div>\n\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"codeblock\">\n            <button type=\"button\" class=\"editor-btn djs-code-theme djs-toggle-target djs-btn-ignore\" data-target=\".editor-list-theme\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-theme\" href=\"#icon-theme\"></use>\n                </svg>\n\n                open theme pop\n            </button>\n\n            <div class=\"editor-list-select editor-list-theme djs-trigger\">\n    `;\n\n    condition.codeTheme.forEach((theme) => {\n        html += `<button type=\"button\" class=\"editor-btn djs-set-theme\" data-value=\"${theme}\">${upperFirstChar(theme)}</button>`;\n    });\n\n    html += `\n            </div>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act\" data-group=\"codeblock\">\n            <button type=\"button\" class=\"editor-select djs-code-lang djs-toggle-target djs-btn-ignore\" data-target=\".editor-list-lang\">\n                <span class=\"editor-text djs-text\">Text</span>\n\n                <svg class=\"editor-icon\" viewbox=\"0 0 64 64\">\n                    <use class=\"path\" xlink:href=\"#icon-arrow-bottom\" href=\"#icon-arrow-bottom\"></use>\n                </svg>\n            </button>\n\n            <div class=\"editor-list-select editor-list-lang djs-trigger\">\n    `;\n\n    condition.codeLang.forEach((lang) => {\n        html += `<button type=\"button\" class=\"editor-btn djs-set-lang\" data-value=\"${lang}\">${upperFirstChar(lang)}</button>`;\n    });\n\n    html += `\n            </div>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act\" data-group=\"ol\">\n            <button type=\"button\" class=\"editor-select djs-list-style djs-toggle-target djs-btn-ignore\" data-target=\".editor-list-type\">\n                <span class=\"editor-text djs-text\">Numbered - 1</span>\n\n                <svg class=\"editor-icon\" viewbox=\"0 0 64 64\">\n                    <use class=\"path\" xlink:href=\"#icon-arrow-bottom\" href=\"#icon-arrow-bottom\"></use>\n                </svg>\n            </button>\n\n            <div class=\"editor-list-select editor-list-type djs-trigger\">\n                <button type=\"button\" class=\"editor-btn djs-set-list-type\" data-value=\"number\">Numbered - 1</button>\n                <button type=\"button\" class=\"editor-btn djs-set-list-type\" data-value=\"upper-roman\">Upper-roman - I</button>\n                <button type=\"button\" class=\"editor-btn djs-set-list-type\" data-value=\"lower-roman\">Lower-roman - i</button>\n                <button type=\"button\" class=\"editor-btn djs-set-list-type\" data-value=\"upper-alpha\">Upper-alpha - A</button>\n                <button type=\"button\" class=\"editor-btn djs-set-list-type\" data-value=\"lower-alpha\">Lower-alpha - a</button>\n            </div>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"all\">\n            <button type=\"button\" class=\"editor-btn djs-move-up\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-arrow-up\" href=\"#icon-arrow-up\"></use>\n                </svg>\n\n                move up block\n            </button>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"all\">\n            <button type=\"button\" class=\"editor-btn djs-move-down\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-arrow-down\" href=\"#icon-arrow-down\"></use>\n                </svg>\n\n                move down block\n            </button>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act editor-btn-area\" data-group=\"word,wordblock\">\n            <button type=\"button\" class=\"editor-btn djs-word-block\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path\" xlink:href=\"#icon-word-block\" href=\"#icon-word-block\"></use>\n                </svg>\n\n                make word block\n            </button>\n        </div>\n    `;\n\n    html += `\n        <div class=\"editor-col --act editor-btn-area --noline\" data-group=\"all\">\n            <button type=\"button\" class=\"editor-btn djs-delete-block\">\n                <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                    <use class=\"path --red\" xlink:href=\"#icon-delete-block\" href=\"#icon-delete-block\"></use>\n                </svg>\n\n                delete block\n            </button>\n        </div>\n    `;\n\n    html += `</div>`;\n    html += `</div>`;\n    html += `</div>`;\n\n    return html;\n}\n\nfunction setEmoticonList(data) {\n    let html = \"\";\n\n    data.forEach((row) => {\n        if (row.type == \"image\") {\n            html += `\n                <button type=\"button\" class=\"editor-emoticon djs-add-emoticon\">\n                    <img src=\"${row.value}\" alt=\"${row.caption}\" class=\"img\">\n                </button>\n            `;\n        } else if (row.type == \"svg\") {\n            html += `\n                <button type=\"button\" class=\"editor-emoticon djs-add-emoticon\">\n                    ${row.value}\n                </button>\n            `;\n        }\n    });\n\n    condition.listEmoticon.insertAdjacentHTML(\"beforeend\", html);\n}\n\nfunction setMediaList(data) {\n    let html = \"\";\n\n    data.forEach((row) => {\n        if (row.type == \"image\") {\n            html += `\n                <li class=\"editor-media djs-media\" data-type=\"image\" data-idx=\"${row.idx}\">\n                    <div class=\"eidtor-img-area djs-add-media\" data-src=\"${row.src}\" data-alt=\"${row.alt}\" data-default-format=\"${row.defaultFormat}\" data-webp=\"${row.webp}\" data-width=\"${row.width}\" data-height=\"${row.height}\">\n                        <img src=\"${`${row.src}.${row.defaultFormat}`}\" class=\"editor-img\">\n                    </div>\n\n                    <p class=\"editor-name djs-name\">${row.alt}</p>\n                    <button type=\"button\" class=\"editor-btn-del djs-del-media\" data-idx=\"${row.idx}\">\n                        <svg viewBox=\"0 0 64 64\" class=\"editor-icon\">\n                            <use class=\"path\" xlink:href=\"#icon-delete-block\" href=\"#icon-delete-block\"></use>\n                        </svg>\n\n                        delete media\n                    </button>\n                </li>\n            `;\n        }\n    });\n\n    condition.listMedia.insertAdjacentHTML(\"beforeend\", html);\n}\n\nfunction addBlockToContent(block, _0 = typeCheckThrow(block, \"string\")) {\n    let $target = getActiveElement();\n    let $selectedItem = getElement(\".--djs-selected\");\n    let $newItem;\n\n    $target.insertAdjacentHTML(\"afterend\", block);\n\n    $newItem = $target.nextElementSibling;\n\n    if ($newItem.contentEditable == \"true\") {\n        condition.activeElement = $newItem;\n        setCursor($newItem, 0);\n    } else {\n        let $child = getChild($newItem, \"*[contenteditable]\", false);\n\n        if ($child != null) {\n            condition.activeElement = $child;\n            setCursor($child, 0);\n        }\n    }\n\n    if ($selectedItem.length > 0) {\n        classControl($selectedItem, \"remove\", \"--djs-selected\");\n    }\n\n    condition.activeItem = $newItem;\n}\n\nfunction getContentData() {\n    let $itemList = getChild(condition.areaContent, \".djs-item\");\n\n    return htmlToJson($itemList);\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/layout.js?");

/***/ }),

/***/ "./common/js/module/message.js":
/*!*************************************!*\
  !*** ./common/js/module/message.js ***!
  \*************************************/
/*! exports provided: message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"message\", function() { return message; });\nconst message = {\n    wrongValue: (valueName) => `DRAGON EDITOR - Wrong type value in \"${valueName}\".`,\n    wrongURL: (name, url) => `DRAGON EDITOR - Wrong URL value { ${name} : \"${url}\" }`,\n    wrongKey: (name, key) => `DRAGON EDITOR - Wrong key set \"${name}\" : { \"${key}\" : ... }`,\n    apiNotWorking: \"API server is not responding.\",\n    serverNotWorking: \"Server is not responding.\",\n    wrongItemStructure: \"This block structure is broken, But we fixed it. Try again please.\",\n    missingSelect: \"Missing block. Please select block.\",\n    noContentData: (lang) => `Language \"${lang}\" is didn't have content. Did you want duplicate to content?`,\n};\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/message.js?");

/***/ }),

/***/ "./common/js/module/option.js":
/*!************************************!*\
  !*** ./common/js/module/option.js ***!
  \************************************/
/*! exports provided: getTextItemOption, setTextItemOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTextItemOption\", function() { return getTextItemOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setTextItemOption\", function() { return setTextItemOption; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { findParentByClass } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\n\nfunction getTextItemOption($node, _0 = typeCheckThrow($node, \"node\")) {\n    let $item = findParentByClass($node, \"djs-item\");\n    let itemType = $item.dataset[\"type\"];\n    let attr = {\n        color: \"\",\n        fontSize: \"\",\n        align: \"\",\n        bold: \"\",\n        italic: \"\",\n        underline: \"\",\n        strikethrough: \"\",\n        wordblock: \"\",\n    };\n\n    if ($node.constructor.name == \"Text\") {\n        $node = $node.parentNode;\n    }\n\n    if ($node.dataset != undefined) {\n        for (const [key] of Object.entries(attr)) {\n            attr[key] = $node.dataset[key] == undefined ? \"\" : $node.dataset[key];\n        }\n    }\n\n    switch ($node.tagName) {\n        case \"B\":\n            attr.bold = \"true\";\n            break;\n        case \"I\":\n            attr.italic = \"true\";\n            break;\n        case \"U\":\n            attr.underline = \"true\";\n            break;\n        case \"DEL\":\n            attr.strikethrough = \"true\";\n            break;\n        case \"CODE\":\n            if (itemType != \"codeblock\") {\n                attr.wordblock = \"true\";\n            }\n            break;\n    }\n\n    return attr;\n}\n\nfunction setTextItemOption($node, option, _0 = typeCheckThrow($node, \"node\"), _1 = typeCheckThrow(option, \"object\")) {\n    for (const [key, value] of Object.entries(option)) {\n        if (value != \"\") {\n            $node.dataset[key] = value;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/option.js?");

/***/ }),

/***/ "./common/js/module/pop.js":
/*!*********************************!*\
  !*** ./common/js/module/pop.js ***!
  \*********************************/
/*! exports provided: openPop, openLinkPop, closeOptionPop, openOptionPop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openPop\", function() { return openPop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openLinkPop\", function() { return openLinkPop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closeOptionPop\", function() { return closeOptionPop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openOptionPop\", function() { return openOptionPop; });\nconst { typeCheckThrow, classControl, isMobile, hasValueArrToArr } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getElement, getChild, findParentByClass, findContenteditable } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { getTextItemOption } = __webpack_require__(/*! ./option */ \"./common/js/module/option.js\");\nconst { getItemType, itemStructureValidation } = __webpack_require__(/*! ./item */ \"./common/js/module/item.js\");\n\nfunction openPop(type, $node, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow($node, \"node\")) {\n    let offset = $node.getBoundingClientRect();\n\n    switch (type) {\n        case \"linkboxBlock\":\n            openLinkPop(\"linkbox\", offset);\n            break;\n        case \"emoticonBlock\":\n            openEmoticonPop(offset);\n            break;\n        case \"youtubeBlock\":\n            openLinkPop(\"youtube\", offset);\n            break;\n        case \"codepenBlock\":\n            openLinkPop(\"codepen\", offset);\n            break;\n    }\n}\n\nfunction openEmoticonPop(offset, _0 = typeCheckThrow(offset, \"domrect,object\")) {\n    let popOffset = condition.popEmoticon.getBoundingClientRect();\n    let right = condition.windowWidth - offset.right + (offset.width + 10);\n    let top = offset.top;\n\n    if (isMobile() == true) {\n        let maxRight = condition.windowWidth - popOffset.width;\n\n        top = offset.top + offset.height;\n\n        if (right > maxRight) {\n            right = maxRight;\n        }\n    }\n\n    condition.popEmoticon.style.top = `${top}px`;\n    condition.popEmoticon.style.right = `${right}px`;\n    closePopIgnore(condition.popEmoticon);\n    classControl(condition.popEmoticon, \"toggle\", \"--act\");\n}\n\nfunction openLinkPop(type, offset = {}, _0 = typeCheckThrow(type, \"string\"), _1 = typeCheckThrow(offset, \"domrect,object\")) {\n    let popOffset = condition.popLinkbox.getBoundingClientRect();\n    let $input = getChild(condition.popLinkbox, \".djs-input\", false);\n    let $btn = getChild(condition.popLinkbox, \".djs-btn\", false);\n    let $aTag = getChild(condition.popLinkbox, \".djs-link\", false);\n    let right = condition.windowWidth - offset.right + (offset.width + 10);\n    let top = offset.top;\n\n    if (isMobile() == true) {\n        let maxRight = condition.windowWidth - popOffset.width;\n\n        top = offset.top + offset.height;\n\n        if (right > maxRight) {\n            right = maxRight;\n        }\n    }\n\n    if (type == \"word\") {\n        let $link = condition.baseNode.parentNode;\n\n        $aTag.textContent = $link.href;\n        $btn.dataset[\"value\"] = type;\n        condition.popLinkbox.dataset[\"type\"] = \"del\";\n        $btn.dataset[\"type\"] = type;\n        classControl(condition.popLinkbox, \"add\", \"--act\");\n    } else {\n        $btn.dataset[\"value\"] = type;\n        $input.value = \"\";\n        condition.popLinkbox.style.top = `${top}px`;\n        condition.popLinkbox.style.right = `${right}px`;\n        closePopIgnore(condition.popLinkbox);\n        classControl(condition.popLinkbox, \"add\", \"--act\");\n        setTimeout(() => {\n            $input.focus();\n        }, 250);\n    }\n}\n\nfunction closePopIgnore(node, _0 = typeCheckThrow(node, \"node\")) {\n    let $popList = getElement(\".djs-trigger.--act\");\n\n    if ($popList.length > 0) {\n        $popList.forEach(($pop) => {\n            if ($pop !== node) {\n                classControl($pop, \"remove\", \"--act\");\n            }\n        });\n    }\n}\n\nfunction closeOptionPop($target, _0 = typeCheckThrow($target, \"node\")) {\n    let isOptionPop = findParentByClass($target, \"djs-option-pop\") !== null ? true : false;\n    let isItem = findParentByClass($target, \"djs-item\") !== null ? true : false;\n    let $btn = findParentByClass($target, \"djs-add-block\");\n    let isBtn = false;\n\n    if ($btn != null) {\n        let type = $btn.dataset[\"type\"];\n\n        if (type == \"block\") {\n            isBtn = true;\n        }\n    }\n\n    if (isOptionPop == false && isItem == false && isBtn == false) {\n        classControl(condition.popOption, \"remove\", \"--act\");\n    }\n}\n\nfunction openOptionPop() {\n    let $target = condition.activeElement == null ? condition.activeItem : condition.activeElement;\n    $target = $target.constructor.name == \"HTMLTableCellElement\" || $target.tagName == \"CODE\" ? condition.activeItem : $target;\n    let offset = $target.getBoundingClientRect();\n    let type = getItemType(condition.activeItem, condition.activeElement);\n    let $colList = getChild(condition.popOption, \".editor-col\");\n    let popOffset = condition.popOption.getBoundingClientRect();\n\n    if (isMobile() !== true && condition.layout != \"container\") {\n        condition.popOption.style.top = `${offset.top - popOffset.height - 10}px`;\n        condition.popOption.style.left = `${offset.left}px`;\n    }\n\n    $colList.forEach(($col) => {\n        let group = $col.dataset[\"group\"].split(\",\");\n\n        if (hasValueArrToArr(group, type) == true) {\n            classControl($col, \"add\", \"--act\");\n        } else {\n            classControl($col, \"remove\", \"--act\");\n        }\n    });\n\n    setOptionPopValue();\n    classControl(condition.popOption, \"add\", \"--act\");\n    if (isMobile() == true) {\n        let $scroll = getChild(condition.popOption, \".djs-scroll-depth\", false);\n        let $childs = getChild(condition.popOption, \".--act\");\n        let width = 0;\n\n        $childs.forEach(($child) => {\n            let childOffset = $child.getBoundingClientRect();\n\n            width += childOffset.width;\n        });\n\n        $scroll.style.width = `${Math.ceil(width)}px`;\n    }\n    itemStructureValidation();\n}\n\nfunction setOptionPopValue() {\n    let $item = findParentByClass(condition.baseNode, \"djs-item\");\n\n    if ($item != null) {\n        let itemType = $item.dataset[\"type\"];\n        let $editableItem = findContenteditable(condition.baseNode);\n        let textStyle = getTextItemOption(condition.baseNode);\n        let fontSizeText = getElement(\".djs-fontsize .djs-text\", false);\n        let btnColor = getElement(\".djs-color\", false);\n        let btnListStyleText = getElement(\".djs-list-style .djs-text\", false);\n        let btnCodeLangText = getElement(\".djs-code-lang .djs-text\", false);\n\n        if ($editableItem == null) {\n            $editableItem = $item;\n        }\n\n        let editableStyle = getTextItemOption($editableItem);\n\n        if (textStyle.fontSize != \"\") {\n            fontSizeText.textContent = Math.floor(textStyle.fontSize * condition.defaultFontSize);\n        } else {\n            fontSizeText.textContent = condition.defaultFontSize;\n        }\n\n        if (textStyle.color != \"\") {\n            btnColor.dataset[\"value\"] = textStyle.color;\n        } else {\n            btnColor.dataset[\"value\"] = condition.defaultColor;\n        }\n\n        if (editableStyle.align != \"\") {\n            condition.btnAlign.forEach(($btn) => {\n                let value = $btn.dataset[\"value\"];\n\n                if (value == editableStyle.align) {\n                    classControl($btn, \"add\", \"--act\");\n                } else {\n                    classControl($btn, \"remove\", \"--act\");\n                }\n            });\n        } else {\n            classControl(condition.btnAlign, \"remove\", \"--act\");\n        }\n\n        if (textStyle.bold != \"\") {\n            classControl(condition.btnToggleBold, \"add\", \"--act\");\n        } else {\n            classControl(condition.btnToggleBold, \"remove\", \"--act\");\n        }\n\n        if (textStyle.italic != \"\") {\n            classControl(condition.btnToggleItalic, \"add\", \"--act\");\n        } else {\n            classControl(condition.btnToggleItalic, \"remove\", \"--act\");\n        }\n\n        if (textStyle.underline != \"\") {\n            classControl(condition.btnToggleUnderline, \"add\", \"--act\");\n        } else {\n            classControl(condition.btnToggleUnderline, \"remove\", \"--act\");\n        }\n\n        if (itemType == \"ol\") {\n            let text;\n\n            condition.btnListType.forEach(($btn) => {\n                let value = $btn.dataset[\"value\"];\n\n                if (value == $item.dataset[\"style\"]) {\n                    text = $btn.textContent;\n                }\n            });\n\n            btnListStyleText.textContent = text;\n        }\n\n        if (itemType == \"codeblock\") {\n            let lang = $item.dataset[\"lang\"];\n\n            btnCodeLangText.textContent = lang;\n        }\n\n        if (textStyle.wordblock != \"\") {\n            classControl(condition.btnWordBlock, \"add\", \"--act\");\n        } else {\n            classControl(condition.btnWordBlock, \"remove\", \"--act\");\n        }\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/pop.js?");

/***/ }),

/***/ "./common/js/module/scroll.js":
/*!************************************!*\
  !*** ./common/js/module/scroll.js ***!
  \************************************/
/*! exports provided: setScroll, refreshScroll, getScrollInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setScroll\", function() { return setScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"refreshScroll\", function() { return refreshScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getScrollInfo\", function() { return getScrollInfo; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\nconst { getChild } = __webpack_require__(/*! ./selector */ \"./common/js/module/selector.js\");\nconst { scrollButtonHTML } = __webpack_require__(/*! ./layout */ \"./common/js/module/layout.js\");\nconst { bindingScrollEvent } = __webpack_require__(/*! ./event */ \"./common/js/module/event.js\");\n\nfunction setScroll() {\n    condition.scrollArea.forEach((node) => {\n        node.insertAdjacentHTML(\"beforeend\", scrollButtonHTML());\n        setScrollHeight(node);\n        bindingScrollEvent(node);\n    });\n}\n\nfunction setScrollHeight($wrap, _0 = typeCheckThrow($wrap, \"node\")) {\n    let $bar = getChild($wrap, \".djs-scroll-bar\", false);\n    let value = getScrollInfo($wrap);\n\n    $bar.style.height = `${value.scrollHeight}px`;\n}\n\nfunction refreshScroll() {\n    condition.scrollArea.forEach((node) => {\n        setScrollHeight(node);\n        bindingScrollEvent(node);\n    });\n}\n\nfunction getScrollInfo($wrap, _0 = typeCheckThrow($wrap, \"node\")) {\n    let $content = getChild($wrap, \".djs-scroll-content\", false);\n    let wrapOffset = $wrap.getBoundingClientRect();\n    let contentOffset = $content.getBoundingClientRect();\n    let contentChild = getChild($wrap, \".djs-scroll-content > *\");\n    let maxHeight = wrapOffset.height - 10;\n    let contentHeight = 0;\n    let percent, height, maxScrollTop, maxBarTop;\n\n    contentChild.forEach((node) => {\n        contentHeight += node.getBoundingClientRect().height;\n    });\n\n    if (contentHeight < maxHeight) {\n        contentHeight = maxHeight;\n    }\n\n    percent = (100 / contentHeight) * maxHeight;\n    height = Math.floor((percent / 100) * maxHeight);\n    maxScrollTop = contentHeight - contentOffset.height;\n    maxBarTop = contentOffset.height - 8 - height;\n\n    if (height == maxHeight) {\n        height = 0;\n    }\n\n    return {\n        scrollHeight: height,\n        contentHeight: contentHeight,\n        maxScrollTop: maxScrollTop,\n        maxBarTop: maxBarTop,\n    };\n}\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/scroll.js?");

/***/ }),

/***/ "./common/js/module/selection.js":
/*!***************************************!*\
  !*** ./common/js/module/selection.js ***!
  \***************************************/
/*! exports provided: setSelection, hasBaseNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSelection\", function() { return setSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasBaseNode\", function() { return hasBaseNode; });\nfunction setSelection() {\n    let selection = window.getSelection();\n\n    condition.focusNode = selection.focusNode;\n    condition.focusOffset = selection.focusOffset;\n    condition.baseNode = selection.baseNode == undefined ? selection.anchorNode : selection.baseNode;\n    condition.baseOffset = selection.baseOffset == undefined ? selection.anchorOffset : selection.baseOffset;\n}\n\nfunction hasBaseNode() {\n    let selection = window.getSelection();\n\n    return selection.baseNode != null || selection.anchorNode != null;\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/selection.js?");

/***/ }),

/***/ "./common/js/module/selector.js":
/*!**************************************!*\
  !*** ./common/js/module/selector.js ***!
  \**************************************/
/*! exports provided: getElement, getChild, checkElement, findParentByClass, getActiveElement, findContenteditable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElement\", function() { return getElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getChild\", function() { return getChild; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkElement\", function() { return checkElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findParentByClass\", function() { return findParentByClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getActiveElement\", function() { return getActiveElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findContenteditable\", function() { return findContenteditable; });\nconst { typeCheckThrow } = __webpack_require__(/*! ./default */ \"./common/js/module/default.js\");\n\nfunction getElement(className, multiple = true, _0 = typeCheckThrow(className, \"string\"), _1 = typeCheckThrow(multiple, \"boolean\")) {\n    if (multiple == true) {\n        return document.querySelectorAll(className);\n    } else {\n        return document.querySelector(className);\n    }\n}\n\nfunction getChild(parent, className, multiple = true, _0 = typeCheckThrow(parent, \"node\"), _1 = typeCheckThrow(className, \"string\"), _2 = typeCheckThrow(multiple, \"boolean\")) {\n    if (multiple == true) {\n        return parent.querySelectorAll(className);\n    } else {\n        return parent.querySelector(className);\n    }\n}\n\nfunction isDocumentHasElement(className, _0 = typeCheckThrow(className, \"string\")) {\n    let $node = document.querySelector(className);\n    return $node === null ? false : true;\n}\n\nfunction checkElement(className = \"\", defaultName, multiple = true, _0 = typeCheckThrow(className, \"string\"), _1 = typeCheckThrow(defaultName, \"string\"), _2 = typeCheckThrow(multiple, \"boolean\")) {\n    let $dumy = className == \"\" ? false : isDocumentHasElement(className);\n\n    return $dumy == false ? getElement(defaultName, multiple) : getElement(className, multiple);\n}\n\nfunction findParentByClass($node, className, _0 = typeCheckThrow($node, \"node\"), _1 = typeCheckThrow(className, \"string\")) {\n    if ($node.constructor.name !== \"HTMLBodyElement\" && $node.constructor.name !== \"HTMLHtmlElement\") {\n        if ($node.constructor.name == \"Text\") {\n            $node = $node.parentNode;\n        }\n\n        let check = $node.classList.contains(className);\n\n        if (check === true) {\n            return $node;\n        } else {\n            return findParentByClass($node.parentElement, className);\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction getActiveElement() {\n    let childCount = condition.areaContent.childElementCount;\n    let childList = getElement(\".djs-content > *\");\n\n    if (condition.activeItem == undefined) {\n        return childList[childCount - 1];\n    } else {\n        if (condition.activeItem.classList.contains(\"djs-item\") == true) {\n            return condition.activeItem;\n        } else {\n            return childList[childCount - 1];\n        }\n    }\n}\n\nfunction findContenteditable($node, _0 = typeCheckThrow($node, \"node\")) {\n    let constructorName = $node.constructor.name;\n    let $target;\n\n    if (constructorName !== \"HTMLBodyElement\") {\n        if (constructorName === \"Text\") {\n            $target = $node.parentElement;\n        } else {\n            $target = $node;\n        }\n\n        let hasAttr = $target.getAttribute(\"contenteditable\");\n\n        if (hasAttr == \"true\") {\n            return $target;\n        } else {\n            return findContenteditable($target.parentElement);\n        }\n    } else {\n        return null;\n    }\n}\n\n\n//# sourceURL=webpack://dragonEditor/./common/js/module/selector.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://dragonEditor/(webpack)/buildin/global.js?");

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./common/js/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /Users/lovefield/Desktop/my/dragonEditor/src/common/js/index.js */\"./common/js/index.js\");\n\n\n//# sourceURL=webpack://dragonEditor/multi_./common/js/index.js?");

/***/ })

/******/ });
});